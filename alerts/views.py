from django.shortcuts import render
from django.http import HttpResponse, HttpRequest
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required
import os
from datetime import datetime
import scripts.get_cves as get_cves
import scripts.shodan_filter as shodan_filter
from .forms import NameForm,QualysFileForm
from .models import CVEScans,ShodanResults,UnlistedCVEs,QualysResults,QualysFiles
import scripts.send_alert_email as alert_email
import scripts.shodan_ as shodan
import scripts.soc_scripts as soc_scripts
from django.shortcuts import render
from django.conf import settings
from django.core.files.storage import FileSystemStorage
import requests
import json
import time


@login_required
def index(request):
    found_cves = get_cves.daily_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Siste døgn', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_weekly(request):
    found_cves = get_cves.weekly_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Siste 7 dager', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_monthly(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.monthly_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_all(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.all_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)


def GetCVEStatistics(cve_list):
    severity = {'Kritisk':0,'Høy':0,'Medium':0,'Lav':0,'N/A':0}
    cve_count = len(cve_list)
    for cve in cve_list:
        if cve["cvss_score"] == "N/A":
            severity["N/A"] +=1
        elif cve["cvss_score"] >= 9:
            severity["Kritisk"] += 1
        elif cve["cvss_score"] >= 7.5:
            severity["Høy"] += 1
        elif cve["cvss_score"] >= 5:
            severity["Medium"] += 1
        else:
            severity["Lav"] += 1
    return cve_count, severity

@login_required
def send_alert(request):
    if request.method == "POST":
        selected_cves = request.POST.getlist("send_alert")
        if len(selected_cves) == 0:
            context = {'AlertMessage':'Du må velge CVEer fra CVE listen for å kunne sende en varsling.'}
        else:
            context = {'Selected_CVEs':get_cves.single_cve(selected_cves)}
    return render(request,'send_alert.html', context)

@login_required
def send_alert_email(request):
    if request.method == "POST":
        table = request.POST.get("CVE_Table")
        receiver = request.POST.get("alert_receiver")
        cc = request.POST.get("alert_cc")
        alert_text = request.POST.get("alert_text")
        CVE = request.POST.getlist("CVEs")
        context = {'receiver':receiver, 'cc':cc, 'description':alert_text, 'CVES':CVE}
        alert_email.main(context)
        found_cves = get_cves.daily_cve()
        scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
        context = {'message':'<b>Sucess</b>: E-mail sent to: {}'.format(receiver),'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info}
        return render(request,'index.html', context)

@login_required
def GoogleNewsScraper(request):
    context = {'UnlistedCVEs':UnlistedCVEs.objects.values()}
    return render(request,'new_cve_scraper.html', context)

@login_required
def Shodan(request):
    shodan_info = shodan.GetResults(0)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsCritical(request):
    shodan_info = shodan.GetResults(5)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsHigh(request):
    shodan_info = shodan.GetResults(4)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsCriticalHigh(request):
    shodan_info = shodan.GetResults(45)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsAll(request):
    shodan_info = shodan.GetResults(1)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def update_shodan_entry(request):
    if request.method == "POST":
        comments = request.POST.getlist("comment")
        ids = request.POST.getlist("entry_id")
        for x,y in zip(ids, comments):
            entry = ShodanResults.objects.get(id=x)
            entry.entry_comments = y
            entry.save(update_fields=['entry_comments'])
    shodan_info = shodan.GetResults()
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2]}
    return render(request,'shodan.html', context)


def SOC(request):
    context = {'':''}
    return render(request,'soc.html', context)


def SOC_Scan_Url(request):
    if request.method == "POST":
        url = request.POST.get("scan_url_entry")
        context = {'URLScan':soc_scripts.URLScanIO(url)}
        return render(request,'soc.html', context)

def GetQualysStats(qualys_results, current_query):
    severity = {'5':0,'4':0,'3':0,'2':0,'1':0}
    internet_exposed = 0
    internet_exposed_ips = []
    for entry in qualys_results:
        severity["{}".format(entry["severity"])] += 1
        if entry["internet_exposed"] == "1":
            internet_exposed += 1
            if entry["hostname"] not in internet_exposed_ips:
                internet_exposed_ips.append(entry["hostname"])
    qualys_stats = {'Timestamp':GetQualysLastEntry(),'Current query':current_query, 'Amount of entries':len(qualys_results), 'Severity':severity, 'Entries with internet exposed':internet_exposed,'Unique internet exposed assets': len(internet_exposed_ips)}
    return qualys_stats


def GetQualysLastEntry():
    last_entry = QualysResults.objects.values().last()["scan_time"]
    return last_entry

@login_required
def Qualys(request):
    context = {}
    return render(request,'qualys.html', context)

@login_required
def QualysAll(request):
    qualys_results = QualysResults.objects.filter(scan_time=GetQualysLastEntry()).values()
    context = {'QualysResults':qualys_results, 'QualysStats':GetQualysStats(qualys_results, "All")}
    return render(request,'qualys.html', context)

def QualysShodan(filters):
    shodan_search = ShodanResults.objects.values()
    qualys_results = []
    for entry in shodan_search:
        hostnames = entry["internal_hosts"]
        if hostnames:
            if hostnames != "[]" and hostnames != None:
                for x in list(eval(hostnames)):
                    hostname = x["server"]
                    qualys_server_results = list(QualysResults.objects.filter(hostname=x["server"], scan_time=GetQualysLastEntry()).values())
                    for i in qualys_server_results:
                        i["internet_exposed"] = entry["entry_ip"]
                        if i["last_fixed"] == "NaT":
                            i["last_fixed"] = "N/A"
                    qualys_results.append(qualys_server_results)
    context = {'QualysResults':[item for sublist in qualys_results for item in sublist], "filters":filters}
    return context

@login_required
def QualysSeverity5(request):
    qualys_results = QualysResults.objects.filter(severity="5", scan_time=GetQualysLastEntry()).values()
    context = {'QualysResults':qualys_results, 'QualysStats':GetQualysStats(qualys_results, "Critical vulnerabilities")}
    return render(request,'qualys.html', context)

def QualysSearch(request):
    if request.method == "POST":
        filters = {"filepath": request.POST.get("filepath_checkbox"), "internet_exposed":request.POST.get("internetex_checkbox"),
        "critical_vulns": critical_vulns = request.POST.get("critical_vulns_checkbox"), "all_entries":request.POST.get("all_checkbox")}
        if filters["internet_exposed"] == "1":
            context = QualysShodan(filters)
            return render(request,'qualys.html', context)
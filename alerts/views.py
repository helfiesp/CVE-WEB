from django.shortcuts import render
from django.http import HttpResponse, HttpRequest
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required
import os
from datetime import datetime
import scripts.get_cves as get_cves
import scripts.shodan_filter as shodan_filter
from .models import CVEScans,ShodanResults,UnlistedCVEs,QualysResults,PasswordSpray
import scripts.send_alert_email as alert_email
import scripts.shodan_ as shodan
import scripts.soc_scripts as soc_scripts
from django.shortcuts import render
from django.conf import settings
from django.core.files.storage import FileSystemStorage
import requests
import json
import time


@login_required
def index(request):
    found_cves = get_cves.daily_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Siste døgn', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_weekly(request):
    found_cves = get_cves.weekly_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Siste 7 dager', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_monthly(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.monthly_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_all(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.all_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)


def GetCVEStatistics(cve_list):
    severity = {'Kritisk':0,'Høy':0,'Medium':0,'Lav':0,'N/A':0}
    cve_count = len(cve_list)
    for cve in cve_list:
        if cve["cvss_score"] == "N/A":
            severity["N/A"] +=1
        elif cve["cvss_score"] >= 9:
            severity["Kritisk"] += 1
        elif cve["cvss_score"] >= 7.5:
            severity["Høy"] += 1
        elif cve["cvss_score"] >= 5:
            severity["Medium"] += 1
        else:
            severity["Lav"] += 1
    return cve_count, severity

@login_required
def send_alert(request):
    if request.method == "POST":
        selected_cves = request.POST.getlist("send_alert")
        if len(selected_cves) == 0:
            context = {'AlertMessage':'Du må velge CVEer fra CVE listen for å kunne sende en varsling.'}
        else:
            context = {'Selected_CVEs':get_cves.single_cve(selected_cves)}
    return render(request,'send_alert.html', context)

@login_required
def send_alert_email(request):
    if request.method == "POST":
        table = request.POST.get("CVE_Table")
        receiver = request.POST.get("alert_receiver")
        cc = request.POST.get("alert_cc")
        alert_text = request.POST.get("alert_text")
        CVE = request.POST.getlist("CVEs")
        context = {'receiver':receiver, 'cc':cc, 'description':alert_text, 'CVES':CVE}
        alert_email.main(context)
        found_cves = get_cves.daily_cve()
        scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
        context = {'message':'<b>Sucess</b>: E-mail sent to: {}'.format(receiver),'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info}
        return render(request,'index.html', context)

@login_required
def GoogleNewsScraper(request):
    context = {'UnlistedCVEs':UnlistedCVEs.objects.values()}
    return render(request,'new_cve_scraper.html', context)

def Shodan(request):
    shodan_info = shodan.GetResults(0)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsCritical(request):
    shodan_info = shodan.GetResults(5)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsHigh(request):
    shodan_info = shodan.GetResults(4)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsCriticalHigh(request):
    shodan_info = shodan.GetResults(45)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def ShodanVulnsAll(request):
    shodan_info = shodan.GetResults(1)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3]}
    return render(request,'shodan.html', context)

@login_required
def update_shodan_entry(request):
    if request.method == "POST":
        comments = request.POST.getlist("comment")
        ids = request.POST.getlist("entry_id")
        for x,y in zip(ids, comments):
            entry = ShodanResults.objects.get(id=x)
            entry.entry_comments = y
            entry.save(update_fields=['entry_comments'])
    shodan_info = shodan.GetResults()
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2]}
    return render(request,'shodan.html', context)


def SOC(request):
    context = {'':''}
    return render(request,'soc.html', context)


def SOC_Scan_Url(request):
    if request.method == "POST":
        url = request.POST.get("scan_url_entry")
        context = {'URLScan':soc_scripts.URLScanIO(url)}
        return render(request,'soc.html', context)

def GetQualysStats(qualys_results, current_query):
    severity = {'5':0,'4':0,'3':0,'2':0,'1':0}
    internet_exposed = 0
    internet_exposed_ips = []
    for entry in qualys_results:
        severity["{}".format(entry["severity"])] += 1
        if entry["internet_exposed"] == "1":
            internet_exposed += 1
            if entry["hostname"] not in internet_exposed_ips:
                internet_exposed_ips.append(entry["hostname"])
    qualys_stats = {'Timestamp':GetQualysLastEntry(),'Current query':current_query, 'Amount of entries':len(qualys_results), 'Severity':severity, 'Entries with internet exposed':internet_exposed,'Unique internet exposed assets': len(internet_exposed_ips)}
    return qualys_stats


def GetQualysLastEntry():
    last_entry = QualysResults.objects.values().last()["scan_time"]
    return last_entry

def GetCisaVulns():
    cve_list = []
    cisa_file = json.load(open("/var/csirt/source/CVE-WEB/uploads/data/cisa_known_exploited.json"))
    for entry in cisa_file["vulnerabilities"]:
        if entry["cveID"] not in cve_list:
            cve_list.append(entry["cveID"])
    return cve_list

def UpdateQualysCISAField(entry_id, entry_value):
    # Updates the known_exploited field in the QualysDB
    entry = QualysResults.objects.get(id=entry_id)
    entry.known_exploited = entry_value
    entry.save()


@login_required
def Qualys(request):
    context = {}
    return render(request,'qualys.html', context)

def QualysSearchQuery(filters):
   # Create a dictionary to map filter types to fields
    filter_mapping = {
        "hostname": "hostname",
        "bss": "bss",
        "system": "system",
        "cve": "cve",
        "vulnerability_name":"title",
        "filepath":"filepath",
        "external_ip":"internet_exposed"
    }

    # Construct the base query set
    base_query = QualysResults.objects.filter(
        scan_time=GetQualysLastEntry()
    )

    # Apply filters
    if filters["internet_exposed"]:
        base_query = base_query.exclude(internet_exposed__contains="e")
    if filters["critical_vulns"]:
        base_query = base_query.filter(severity="5")
    if filters["known_exploited"]:
        base_query = base_query.filter(known_exploited="1")

    # Add the search field filter
    search_field = filter_mapping[filters["search_type"]]
    search_value = filters["vuln_search"]
    search_query = {f"{search_field}__contains": search_value}
    base_query = base_query.filter(**search_query)

    # Get the query results
    qualys_server_results = base_query.values()
    return QualysDataFilter(qualys_server_results)


def QualysDataFilter(qualys_data):
    checklist = []
    for entry in qualys_data:
        if entry["id"] not in checklist:
            checklist.append([entry["id"], entry])
    qualys_data_filtered = []
    for entry in checklist:
        if entry[1]["systemmanager"]:
            entry[1]["systemmanager"] = entry[1]["systemmanager"].translate(str.maketrans('', '', "[]'"))
        if "e" in entry[1]["internet_exposed"]:
            entry[1]["internet_exposed"] = "N/A"
        if entry[1]["last_fixed"] == "NaT":
            entry[1]["last_fixed"] = "N/A"
        if entry[1]["cve"] == "nan":
            entry[1]["cve"] = "N/A"
        qualys_data_filtered.append(entry[1])
    return qualys_data_filtered

def QualysSearch(request):
    if request.method == "POST":
        filters = {"filepath": request.POST.get("filepath_checkbox"), 
        "internet_exposed":request.POST.get("internetex_checkbox"),
        "critical_vulns": request.POST.get("critical_vulns_checkbox"), 
        "all_entries":request.POST.get("all_checkbox"), 
        "known_exploited":request.POST.get("knownex_checkbox"),
        "vuln_search":request.POST.get("vuln_search"),
        "search_type":request.POST.get("search_type"),
        "systeminfo":request.POST.get("systeminfo_checkbox"),
        "business_service":request.POST.get("business_service_checkbox"),
        }
        context = {'QualysResults':QualysSearchQuery(filters), "filters":filters}
        return render(request,'qualys.html', context)
    else:
        message = "Du må velge et filter for å vise resultater..."
        context = {'message':message}
        return render(request,'qualys.html', context)

def ExposedPasswords(request):
    data = PasswordSpray.objects.values()
    for entry in data:
        for item in list(eval(entry["userinfo"])):
            if data["user"] in item:
                print(item)
    context = {'data':data}
    return render(request,'exposed_passwords.html', context)

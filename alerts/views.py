from django.shortcuts import render
from django.http import HttpResponse, HttpRequest
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required
import os
from datetime import datetime
import scripts.get_cves as get_cves
import scripts.shodan_filter as shodan_filter
from .forms import NameForm
from .models import CVEScans,ShodanResults,UnlistedCVEs,QualysResults
import scripts.send_alert_email as alert_email
import scripts.shodan_ as shodan
import scripts.soc_scripts as soc_scripts


@login_required
def index(request):
	found_cves = get_cves.daily_cve()
	found_news = get_cves.daily_news()
	UnlistedCVEs = get_cves.unlisted_cves()
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
	return render(request,'index.html', context)

def cve_search_daily(request):
	found_cves = get_cves.daily_cve()
	scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info}
	return render(request,'index.html', context)

def daily_cve(request):
	found_cves = get_cves.daily_cve()
	found_news = get_cves.daily_news()
	scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info, 'DailyNews':found_news}
	return render(request,'index.html', context)

def yesterdays_cve(request):
	found_cves = get_cves.yesterdays_cve()
	scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Gårsdagens CVE', 'Last_scan':scan_info}
	return render(request,'index.html', context)

def weekly_cve(request):
	found_cves = get_cves.weekly_cve()
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'CVE Siste 7 dager'}
	return render(request,'index.html', context)
	
def monthly_cve(request):
	found_cves = get_cves.monthly_cve()
	context = {'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'CVE denne måneden'}
	return render(request,'index.html', context)

def send_alert(request):
	if request.method == "POST":
		selected_cves = request.POST.getlist("send_alert")
		print(selected_cves)
	context = {'Selected_CVEs':get_cves.single_cve(selected_cves)}
	return render(request,'send_alert.html', context)

def send_alert_email(request):
	if request.method == "POST":
		table = request.POST.get("CVE_Table")
		receiver = request.POST.get("alert_receiver")
		cc = request.POST.get("alert_cc")
		alert_text = request.POST.get("alert_text")
		CVE = request.POST.getlist("CVEs")
		password = request.POST.get("alert_password") 
		if password == "5501":
			context = {'receiver':receiver, 'cc':cc, 'description':alert_text, 'CVES':CVE}
			alert_email.main(context)
			found_cves = get_cves.daily_cve()
			scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
			context = {'message':'<b>Sucess</b>: E-mail sent to: {}'.format(receiver),'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info}
			return render(request,'index.html', context)
		else:
			cves = eval(request.POST.get("cve_table"))
			context = {'message':'<b>Error:</b> Wrong passcode entered','Selected_CVEs':cves,'receiver':receiver, 'cc':cc, 'description':alert_text, 'CVES':CVE}
			return render(request,'send_alert.html', context)

def GoogleNewsScraper(request):
	context = {'UnlistedCVEs':UnlistedCVEs.objects.values()}
	return render(request,'new_cve_scraper.html', context)

def Shodan(request):
	shodan_info = shodan.GetResults()
	context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2]}
	return render(request,'shodan.html', context)

def update_shodan_entry(request):
	if request.method == "POST":
		comments = request.POST.getlist("comment")
		ids = request.POST.getlist("entry_id")
		for x,y in zip(ids, comments):
			entry = ShodanResults.objects.get(id=x)
			entry.entry_comments = y
			entry.save(update_fields=['entry_comments'])
	shodan_info = shodan.GetResults()
	context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2]}
	return render(request,'shodan.html', context)

def SOC(request):
	context = {'':''}
	return render(request,'soc.html', context)

def SOC_Scan_Url(request):
	if request.method == "POST":
		url = request.POST.get("scan_url_entry")
		context = {'URLScan':soc_scripts.URLScanIO(url)}
		return render(request,'soc.html', context)

def Qualys(request):
	qualys_results = QualysResults.objects.values()
	severity = {'5':0,'4':0,'3':0,'2':0,'1':0}
	internet_exposed = 0
	for entry in qualys_results:
		severity["{}".format(entry["severity"])] += 1
		if internet_exposed	== "True":
			internet_exposed += 1

	qualys_stats = {'Entries':len(qualys_results), 'Severity':severity, 'InternetExposed':internet_exposed}
	context = {'QualysResults':qualys_results, 'QualysStats':qualys_stats}

	return render(request,'qualys.html', context)
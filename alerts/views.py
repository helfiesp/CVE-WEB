from django.shortcuts import render
from django.http import HttpResponse, HttpRequest
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from django.core.files.storage import FileSystemStorage
import os
from django.contrib.auth.models import Group
from datetime import datetime
import scripts.get_cves as get_cves
import scripts.shodan_filter as shodan_filter
from .models import CVEScans,ShodanResults,UnlistedCVEs,QualysResults,PasswordSpray,OKDomains,ADUsers,QualysComments,NessusData
from .forms import OKDomainsForm
import scripts.send_alert_email as alert_email
from collections import defaultdict
import scripts.shodan_ as shodan
import scripts.soc_scripts as soc_scripts
from django.shortcuts import render
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.db.models import Q
import requests
import subprocess
import json
import logging
import time
import csv
import sys
try:
    import ldap
except:
    print("Could not import LDAP")


def is_member_of_group(group_name):
    def check(user):
        return user.is_authenticated and user.groups.filter(name=group_name).exists()
    return check

@login_required
def GetUserData(request):
    user = request.user
    user_data = {
        'username': user.username,
        'email': user.email,
        'first_name': user.first_name,
        'last_name': user.last_name,
    }
    return user_data

@login_required
def index(request):
    found_cves = get_cves.daily_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 
               'CVECount':cve_stats[0], 
               'CVEStats':cve_stats[1], 
               'CVEQuery':'Siste døgn', 
               'DailyNews':found_news, 
               'UnlistedCVEs':UnlistedCVEs, 
               'UserData':GetUserData(request)}
    return render(request,'index.html', context)

@login_required
def cve_weekly(request):
    found_cves = get_cves.weekly_cve()
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Siste 7 dager', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_monthly(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.monthly_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)

@login_required
def cve_all(request):
    found_news = get_cves.daily_news()
    UnlistedCVEs = get_cves.unlisted_cves()
    found_cves = get_cves.all_cve()
    cve_stats = GetCVEStatistics(found_cves)
    context = {'CVE_list':found_cves, 'CVECount':cve_stats[0], 'CVEStats':cve_stats[1], 'CVEQuery':'Denne måneden', 'DailyNews':found_news, 'UnlistedCVEs':UnlistedCVEs}
    return render(request,'index.html', context)


def GetCVEStatistics(cve_list):
    severity = {'Kritisk':0,'Høy':0,'Medium':0,'Lav':0,'N/A':0}
    cve_count = len(cve_list)
    for cve in cve_list:
        if cve["cvss_score"] == "N/A":
            severity["N/A"] +=1
        elif cve["cvss_score"] >= 9:
            severity["Kritisk"] += 1
        elif cve["cvss_score"] >= 7.5:
            severity["Høy"] += 1
        elif cve["cvss_score"] >= 5:
            severity["Medium"] += 1
        else:
            severity["Lav"] += 1
    return cve_count, severity

@login_required
def send_alert(request):
    if request.method == "POST":
        selected_cves = request.POST.getlist("send_alert")
        if len(selected_cves) == 0:
            context = {'AlertMessage':'Du må velge CVEer fra CVE listen for å kunne sende en varsling.'}
        else:
            context = {'Selected_CVEs':get_cves.single_cve(selected_cves)}
    return render(request,'send_alert.html', context)

@login_required
def send_alert_email(request):
    if request.method == "POST":
        table = request.POST.get("CVE_Table")
        receiver = request.POST.get("alert_receiver")
        cc = request.POST.get("alert_cc")
        alert_text = request.POST.get("alert_text")
        CVE = request.POST.getlist("CVEs")
        context = {'receiver':receiver, 'cc':cc, 'description':alert_text, 'CVES':CVE}
        alert_email.main(context)
        found_cves = get_cves.daily_cve()
        scan_info = str(*CVEScans.objects.filter(scan_type="daily").values('scan_end').last().values())
        context = {'message':'<b>Sucess</b>: E-mail sent to: {}'.format(receiver),'CVE_list':found_cves, 'CVE_Count':len(found_cves), 'Query':'Realtime CVE', 'Last_scan':scan_info}
        return render(request,'index.html', context)

@login_required
def GoogleNewsScraper(request):
    context = {'UnlistedCVEs':UnlistedCVEs.objects.values(), 'UserData':GetUserData(request)}
    return render(request,'new_cve_scraper.html', context)

@login_required
def Shodan(request):
    shodan_info = shodan.GetResults(0)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3], 'UserData':GetUserData(request)}
    return render(request,'shodan.html', context)

@login_required
def update_shodan_entry(request):
    if request.method == "POST":
        comments = request.POST.getlist("comment")
        ids = request.POST.getlist("entry_id")
        for x,y in zip(ids, comments):
            entry = ShodanResults.objects.get(id=x)
            entry.entry_comments = y
            entry.save(update_fields=['entry_comments'])
    shodan_info = shodan.GetResults(0)
    context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3], 'UserData':GetUserData(request)}
    return render(request,'shodan.html', context)


@login_required
def ShodanSearch(request, filters=None):
    if request.method == "POST":
        if not filters:
            filters = ShodanGetFilters(request) 
        shodan_info = shodan.GetResults(0)
        context = {'ShodanResults':ShodanDataFilter(ShodanSearchQuery(filters)[0], filters), 'filters':filters, 'UserData':GetUserData(request)}
        return render(request,'shodan.html', context)
    else:
        shodan_info = shodan.GetResults(0)
        context = {'ShodanResults':shodan_info[0], 'Shodan_Stats':shodan_info[1], 'ShodanScans':shodan_info[2], 'Vulns':shodan_info[3], 'filters':filters, 'UserData':GetUserData(request)}
        return render(request,'shodan.html', context)

def ShodanGetFilters(request):
    filters = {
        "webservers": request.POST.get("webserver_checkbox"), 
        "ssh":request.POST.get("ssh_checkbox"),
        "others":request.POST.get("others_checkbox"),
        }
    return filters

def ShodanSearchQuery(filters):
    # Construct the base query set
    base_query = ShodanResults.objects.all()

    # Get the query results
    results = base_query.values()
    shodan_server_results = shodan.GetResults(0, results)
    return shodan_server_results

def ShodanDataFilter(shodan_data, filters):
    webserver_shodan_data = []
    ssh_shodan_data = []
    others_shodan_data = []

    for entry in shodan_data:
        if "ssh" in entry["entry_data"]["product"].lower() or entry["entry_data"]["port"] == 22:
            ssh_shodan_data.append(entry)
        else:
            target_words = ["apache", "http", "iis", "jetty", "nginx"]
            product_data = entry["entry_data"]["product"]
            entry["has_target_word"] = any(word in product_data.lower() for word in target_words)
            status_code = entry["entry_data"]["http"]["status"] if "http" in entry["entry_data"] else None
            if entry["has_target_word"] or entry["entry_data"]["port"] in [80, 443] or (status_code and 200 <= status_code <= 399):
                if entry not in webserver_shodan_data:
                    webserver_shodan_data.append(entry)
            else:
                others_shodan_data.append(entry)

    if filters["ssh"]:
        if filters["webservers"]:
            return ssh_shodan_data.extend(webserver_shodan_data)
        else:
            return ssh_shodan_data
    else:
        if filters["webservers"]:
            return webserver_shodan_data
        else:
            return others_shodan_data



@login_required
def SOC(request):
    context = {'':''}
    return render(request,'soc.html', context)

@login_required
def SOC_Scan_Url(request):
    if request.method == "POST":
        url = request.POST.get("scan_url_entry")
        context = {'URLScan':soc_scripts.URLScanIO(url)}
        return render(request,'soc.html', context)

def GetQualysStats(qualys_results, current_query):
    severity = {'5':0,'4':0,'3':0,'2':0,'1':0}
    internet_exposed = 0
    internet_exposed_ips = []
    for entry in qualys_results:
        severity["{}".format(entry["severity"])] += 1
        if entry["internet_exposed"] == "1":
            internet_exposed += 1
            if entry["hostname"] not in internet_exposed_ips:
                internet_exposed_ips.append(entry["hostname"])
    qualys_stats = {'Timestamp':GetQualysLastEntry(),'Current query':current_query, 'Amount of entries':len(qualys_results), 'Severity':severity, 'Entries with internet exposed':internet_exposed,'Unique internet exposed assets': len(internet_exposed_ips)}
    return qualys_stats


def GetQualysLastEntry():
    # Fetches the latest entry from thr qualys database.
    # This is to ensure that the newest data is shown.
    last_entry = QualysResults.objects.values().last()["scan_time"]
    return last_entry

def GetCisaVulns():
    # Fetches the CISA known exploited vulnerabilities from a local JSON document.
    # It is not being fetched directly from the CISA website as there are some issues with the proxy.
    cve_list = []
    cisa_file = json.load(open("/var/csirt/source/CVE-WEB/uploads/data/cisa_known_exploited.json"))
    for entry in cisa_file["vulnerabilities"]:
        if entry["cveID"] not in cve_list:
            cve_list.append(entry["cveID"])
    return cve_list

def UpdateQualysCISAField(entry_id, entry_value):
    # Updates the known_exploited field in the QualysDB
    entry = QualysResults.objects.get(id=entry_id)
    entry.known_exploited = entry_value
    entry.save()

def GetQualysBS():
    business_services = ['All data'] + list(QualysResults.objects.exclude(bs__isnull=True).exclude(bs__exact='').values_list('bs', flat=True).distinct())
    sorted_business_services = sorted(business_services)
    return sorted_business_services

@login_required
def Qualys(request):
    last_entry = GetQualysLastEntry()
    context = {'filters':{'dataset':GroupChecker(request), 'last_entry':last_entry}, 'UserData':GetUserData(request), 'business_service':GetQualysBS()}
    return render(request,'qualys.html', context)

def KartoteketAPIBSCheck(request):
    # Checks the Kartoteket API to see if the user is manager of a business service.
    # This is to ensure that the user can automatically view the data assigned to them.
    email = request.user.email
    url = "https://kartoteket.oslo.kommune.no//get-api/tilganger/?email={}".format(email)
    header = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET_BS"]}
    result = requests.get(url, headers=header).json()["business_services"]
    return result

def ManualCheck(request):
    groups = {
        "CSIRT": ["all"],
        "ITAS": ["OK-ITAS"],
        "ACOS_UKE": ["OK-Acos - Standard tjeneste"]
    }
    user_groups = []
    for group in groups:
        if is_member_of_group(group)(request.user):
            user_groups.extend(groups[group])
    return user_groups

def GroupChecker(request):
    try:
        dataset = KartoteketAPIBSCheck(request)
        if dataset:
            return dataset
        else:
            dataset = ManualCheck(request)
    except Exception as e:
        dataset = ManualCheck(request)
    return dataset


def QualysSearchQuery(filters):
    # Create a dictionary to map filter types to fields
    filter_mapping = {
        "hostname": "hostname",
        "bss": "bss",
        "system": "system",
        "cve": "cve",
        "vulnerability_name": "title",
        "filepath": "filepath",
        "internal_ip": "ip",
        "external_ip": "internet_exposed",
        "comments": "comments"
    }
    
    # Construct the base query set
    base_query = QualysResults.objects.filter(scan_time=GetQualysLastEntry())
    
    # Apply filters
    if filters["dataset"] != ["all"]:
        base_query = base_query.filter(bs__in=filters["dataset"])
    if filters["internet_exposed"]:
        base_query = base_query.exclude(internet_exposed__contains="e")
    if filters["critical_vulns"]:
        base_query = base_query.filter(severity="5")
    if filters["known_exploited"]:
        base_query = base_query.filter(known_exploited="1")
    
    # Add the search field filter
    search_field = filter_mapping[filters["search_type"]]
    search_value = filters["vuln_search"]
    search_query = {f"{search_field}__contains": search_value}
    base_query = base_query.filter(**search_query)
    
    # Remove entries containing "Update for kernel" if filter_kernel is true
    if filters["filter_kernel"]:
        base_query = base_query.exclude(title__contains="Update for kernel")
    if filters["filter_webservers"]:
        base_query = base_query.filter(title__contains="Update for kernel")
    
    # Check and apply selected_service filter
    selected_service = filters.get("selected_service")
    if selected_service and selected_service != "All data":
        base_query = base_query.filter(bs__contains=selected_service)
    
    # Get the query results
    qualys_server_results = base_query.values()
    return QualysDataFilter(qualys_server_results)

def QualysOverview(qualys_data, filters):
    grouped_data = {}
    total_count = 0

    for entry in qualys_data:
        title = entry['title']
        if title in grouped_data:
            grouped_data[title]['count'] += 1
        else:
            grouped_data[title] = {'title': title, 'count': 1}

        if 'severity' not in grouped_data[title]:
            grouped_data[title]['severity'] = entry['severity']

        if 'cve' not in grouped_data[title]:
            grouped_data[title]['cve'] = entry['cve']

        if 'hostnames' not in grouped_data[title]:
            grouped_data[title]['hostnames'] = []
        grouped_data[title]['hostnames'].append(entry['hostname'])

        # Fetch comments from QualysComments table based on title

        comments = QualysComments.objects.filter(title=title, filters=MapQualysCommentsFilters(filters))
        comment_list = [comment.comment for comment in comments]
        grouped_data[title]['comments'] = ", ".join(comment_list)

        total_count += 1  # Increment the total count

    result = sorted(grouped_data.values(), key=lambda x: x['count'], reverse=True)
    return {'data': result, 'total_count': total_count}


def UpdateQualysCommentField(title, hostname, comment):
    # Updates the known_exploited field in the QualysDB
    entries = QualysResults.objects.filter(title=title, hostname=hostname)
    for entry in entries:
        if entry.comments != comment:  # Only update if the value has changed
            entry.comments = comment
            entry.save()

def UpdateQualysCommentsDB(title, filters, servers, comment):
    # Updates the known_exploited field in the QualysDB
    entry, created = QualysComments.objects.get_or_create(title=title, filters=filters, servers=servers)
    if entry.comment != comment:  # Only update if the value has changed
        entry.comment = comment
        entry.save()


def MapQualysCommentsFilters(filters):
    new_filters = {
    'dataset':filters["dataset"], 
    'internet_exposed':filters["internet_exposed"],
    'critical_vulns':filters["critical_vulns"], 
    'known_exploited':filters["known_exploited"]
    }
    return new_filters


def UpdateQualysComments(request):
    if request.method == 'POST':
        existing_filters = dict(eval(request.POST.get("filters")))
        search_filters = MapQualysCommentsFilters(existing_filters)
        hostnames = request.POST.getlist("hostnames")
        servers = []
        for entry in hostnames:
            servers.append(entry.split("-|-")[1])
        entries = []
        for key, value in request.POST.items():
            if key.startswith("comment"):
                comment_dict = {"title":key.replace("comment-", ""), "comment":value}
                entries.append(comment_dict.copy())
                if len(str(value)) > 5:
                    UpdateQualysCommentsDB(comment_dict["title"], search_filters, str(servers), value)
        for entry in hostnames:
            title = entry.split("-|-")[0]
            hostname = entry.split("-|-")[1]
            for entry in entries:
                if entry["title"] == title and len(str(value)) > 5:
                    UpdateQualysCommentField(title, hostname, entry["comment"])
    return QualysSearch(request, existing_filters)




def QualysDataFilter(qualys_data):
    checklist = []
    last_detected = GetQualysLastEntry()  # Assuming GetQualysLastEntry() returns the desired value 
    for entry in qualys_data:
        if entry["id"] not in checklist:
            checklist.append([entry["id"], entry]) 
    qualys_data_filtered = []
    for entry in checklist:
        if entry[1]["systemmanager"]:
            entry[1]["systemmanager"] = entry[1]["systemmanager"].translate(str.maketrans('', '', "[]'"))
        if "e" in entry[1]["internet_exposed"]:
            entry[1]["internet_exposed"] = "N/A"      
        if entry[1]["last_fixed"] == "NaT":
            entry[1]["last_fixed"] = "N/A"        
        if entry[1]["cve"] == "nan":
            entry[1]["cve"] = "N/A"
        if entry[1]["last_detected"].split()[0] != last_detected:
            continue  # Skip this entry if last_detected is not equal to the desired value
        qualys_data_filtered.append(entry[1])
    return qualys_data_filtered

def QualysGetStats(qualys_results):
    pass

def QualysGetFilters(request, dataset):
    last_entry = GetQualysLastEntry()
    filters = {
        "last_entry":last_entry,
        "dataset": dataset,
        "filepath": request.POST.get("filepath_checkbox"), 
        "internet_exposed":request.POST.get("internetex_checkbox"),
        "overview":request.POST.get("overview_checkbox"),
        "critical_vulns": request.POST.get("critical_vulns_checkbox"), 
        "all_entries":request.POST.get("all_checkbox"), 
        "known_exploited":request.POST.get("knownex_checkbox"),
        "vuln_search":request.POST.get("vuln_search"),
        "search_type":request.POST.get("search_type"),
        "selected_service":request.POST.get("selected_service"),
        "systeminfo":request.POST.get("systeminfo_checkbox"),
        "business_service":request.POST.get("business_service_checkbox"),
        "comments":request.POST.get("comments_checkbox"),
        "filter_kernel":request.POST.get("filter_kernel_checkbox"),
        "filter_webservers":request.POST.get("filter_webservers_checkbox"),
        }
    return filters

@login_required
def QualysSearch(request, filters=None):
    if request.method == "POST":
        business_services = GetQualysBS()
        if not filters:
            filters = QualysGetFilters(request, GroupChecker(request))
        qualys_results = QualysSearchQuery(filters)        
        if filters["overview"]:
            context = {'QualysResults':qualys_results, "filters":filters, "overview_table":QualysOverview(qualys_results, filters), 'UserData':GetUserData(request), 'business_service': business_services}
        else:
            context = {'QualysResults':qualys_results, "filters":filters, 'UserData':GetUserData(request), 'business_service':business_services}
        return render(request,'qualys.html', context)
    else:
        message = "Du må velge et filter for å vise resultater..."
        context = {'message':message, 'UserData':GetUserData(request)}
        return render(request,'qualys.html', context)

@login_required
def ExposedPasswords(request):
    data = PasswordSpray.objects.values()
    for entry in data:
        for item in list(eval(entry["userinfo"])):
            if entry["user"] in str(item):
                for x in item:
                    if type(x) == dict:
                        entry["groups"] = x["memberOf"]
    context = {'data':data, 'UserData':GetUserData(request)}
    return render(request,'exposed_passwords.html', context)

@login_required
def VulnerabilityUpload(request):
    if request.method == 'POST':
        file = request.FILES['file']
        filename = file.name
        upload_path = '/var/csirt/source/CVE-WEB/uploads/qualys_vulns/'

        # Get the selected vulnerability type from the dropdown menu
        vulnerability_type = request.POST.get('vulnerability_type')

        # Check if the selected vulnerability type is Qualys or Defender and set the filename accordingly
        if vulnerability_type == 'Qualys':
            new_filename = 'QualysVulnerabilities.xlsx'
            script_path = '/var/csirt/source/CVE-WEB/scripts/updatequalys.sh'
        elif vulnerability_type == 'Defender':
            new_filename = 'DefenderVulnerabilities.xlsx'
            script_path = '/var/csirt/source/CVE-WEB/scripts/updatedefender.sh'
        else:
            # Return an error message if the selected vulnerability type is invalid
            context = {'filename': '', 'upload_result': 'error', 'output': '', 'error': 'Invalid request'}
            return render(request, 'qualys_upload.html', context)

        file_path = os.path.join(upload_path, new_filename)

        # Remove the existing "Vulnerabilities.xlsx" file if it exists
        existing_file_path = os.path.join(upload_path, new_filename)
        if os.path.isfile(existing_file_path):
            os.remove(existing_file_path)

        # Save the uploaded file with the appropriate filename
        with open(file_path, 'wb') as f:
            for chunk in file.chunks():
                f.write(chunk)

        # Run the appropriate script based on the selected vulnerability type
        process = subprocess.Popen(['/bin/bash', script_path, file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()

        # Decode the output and error from bytes to string
        output = output.decode()
        error = error.decode()

        # Render the qualys_upload.html template with the upload result and script output
        context = {'filename': new_filename, 'upload_result': 'success', 'output': output, 'error': error, 'UserData':GetUserData(request)}
        return render(request, 'qualys_upload.html', context)

    return render(request, 'qualys_upload.html')


@login_required
def AttackSurface(request):
    latest_nessus_data = NessusData.objects.order_by('-date').first()

    if latest_nessus_data:
        latest_data = json.loads(latest_nessus_data.data)
        dataset = latest_data.get("data")
        grouped_lists = process_vulnerabilities(dataset)
        
    context = {'Vulnerabilities': grouped_lists, 'UserData': GetUserData(request)}
    return render(request, 'attack_surface.html', context)

@login_required
def AttackSurfaceSearchDomain(request, domain):
    domain = str(domain).lower()
    domain_entry = OKDomains.objects.filter(domain=domain).values()[0]
    vulnerabilities = process_vulnerabilities(json.loads(domain_entry["vulnerabilities"]))

    context = {'SearchType':'domene','okdomains': domain_entry, 'Domain': domain, 'Vulnerabilities': vulnerabilities, 'UserData': GetUserData(request)}
    return render(request, 'attack_surface_domain_search.html', context)


@login_required
def AttackSurfaceSearchByType(request):
    if request.method == "POST":
        vuln_search = request.POST.get("vuln_search")
        search_type = request.POST.get("search_type")

        if search_type == "domain":
            return AttackSurfaceSearchDomain(request, vuln_search)
        elif search_type == "cve":
            return AttackSurfaceSearchCVE(request, vuln_search)
        else:
            print("Invalid search type.")

    return render(request, 'attack_surface_search_form.html', {'UserData': GetUserData(request)})

@login_required
def AttackSurfaceSearchCVE(request, cve):
    query = Q(vulnerabilities__contains=f'"CVE": "{cve}"')
    matching_entries = OKDomains.objects.filter(query).values()
    print(type(matching_entries))
    context = {'SearchType':'CVE','Vulnerabilities': matching_entries, 'CVE': cve, 'UserData': GetUserData(request)}
    return render(request, 'attack_surface_domain_search.html', context)


def process_vulnerabilities(dataset):
    grouped_entries = defaultdict(lambda: {'vuln': {}, 'affected_hosts': set()})

    def IterateEntry(entry):
        entry_name = entry.get("Name")
        if entry_name:
            vulnerability_info = {
                "Plugin_ID": entry.get("Plugin ID"),
                "CVE": entry.get("CVE") if entry.get("CVE") else None,
                "CVSS": float(entry.get("CVSS v2.0 Base Score")) if entry.get("CVSS v2.0 Base Score") else 0,
                "Name": entry_name,
                "Risk": entry.get("Risk"),
                "Synopsis": entry.get("Synopsis"),
                "Description": entry.get("Description"),
                "Solution": entry.get("Solution"),
                "See_Also": entry.get("See Also"),
                "Plugin_Output": entry.get("Plugin Output")
            }

            affected_host = {
                "Host": entry.get("Host"),
                "Protocol": entry.get("Protocol"),
                "Port": entry.get("Port")
            }

            grouped_entries[entry_name]['vuln'] = vulnerability_info
            grouped_entries[entry_name]['affected_hosts'].add(affected_host["Host"])  # Using a set to remove duplicates

    if isinstance(dataset, list):
        for entry in dataset:
            IterateEntry(entry)
    else:
        IterateEntry(dataset)

    # Convert the grouped entries dictionary into a list of dictionaries
    grouped_lists = list(grouped_entries.values())
    
    # Sort the grouped lists based on the highest CVSS value within 'vuln'
    grouped_lists.sort(key=lambda x: ('Critical' not in x['vuln']['Risk'], -x['vuln']['CVSS']))
    return grouped_lists


@login_required
def AttackSurfaceSearchPlugin(request, plugin_id):
    if request.method == "GET":
        query = Q(vulnerabilities__contains=f'"Plugin ID": "{plugin_id}"')
        matching_entries = OKDomains.objects.filter(query).values()

        vuln_data = None
        for item in matching_entries:
            vulnerabilities = json.loads(item["vulnerabilities"])
            for vuln in vulnerabilities:
                if str(vuln.get("Plugin ID")) == str(plugin_id):
                    vuln_data = process_vulnerabilities([vuln])[0]['vuln']
                    break

        context = {'Vulnerabilities': matching_entries, 'Plugin_ID': plugin_id, 'vuln_data': vuln_data, 'UserData': GetUserData(request)}
        return render(request, 'attack_surface_vuln_search.html', context)
    

@login_required
def AttackSurfaceDomains(request):
    okdomains = OKDomains.objects.all()
    
    # Parse the JSON data in the vulnerabilities field for each domain
    for domain in okdomains:
        if domain.vulnerabilities:
            domain.vulnerabilities = list(eval(domain.vulnerabilities))
            print(domain.vulnerabilities)
        else:
            domain.vulnerabilities = []  # Set as empty list if the field is empty

    context = {'okdomains': okdomains, 'UserData': GetUserData(request)}
    return render(request, 'attack_surface_domains.html', context)

@login_required
def InsertOKDomain(request):
    blacklist = ['powerapps']
    if request.method == 'POST':
        form = OKDomainsForm(request.POST)
        if form.is_valid():
            # Extract form data and create a new OKDomains object
            domain = form.cleaned_data['domain']

            # Check if domain is in blacklist 
            for entry in blacklist:
                if entry in str(domain):
                    context = {'uploadmessage': 'Error: Domain is blacklisted'}
                    return render(request, 'domains_upload.html', context)

            okdomains, created = OKDomains.objects.get_or_create(domain=domain)

            if created:
                # New domain, set all fields from form data
                okdomains.registrar = form.cleaned_data['registrar']
                okdomains.server = form.cleaned_data['server']
                okdomains.system = form.cleaned_data['system']
                okdomains.system_owner = form.cleaned_data['system_owner']
                okdomains.comments = form.cleaned_data['comments']
                okdomains.changes_since_last = "Initial upload"
            else:
                # Existing domain, update fields only if not empty
                if form.cleaned_data['registrar']:
                    okdomains.registrar = form.cleaned_data['registrar']
                if form.cleaned_data['server']:
                    okdomains.server = form.cleaned_data['server']
                if form.cleaned_data['system']:
                    okdomains.system = form.cleaned_data['system']
                if form.cleaned_data['system_owner']:
                    okdomains.system_owner = form.cleaned_data['system_owner']
                if form.cleaned_data['comments']:
                    okdomains.comments = form.cleaned_data['comments']
                okdomains.changes_since_last = "Updated from upload"

            okdomains.save()
            context = {'uploadmessage': 'Upload completed'}
            return render(request, 'domains_upload.html', context)

        elif request.method == 'POST' and request.FILES:
            # Read CSV file and update database
            try:
                file = request.FILES['file']
                decoded_file = file.read().decode('ISO-8859-1').splitlines()
                reader = csv.DictReader(decoded_file)

                domains = []
                for row in reader:
                    domain = row.get('domain')
                    domains.append(domain)

                # Get all existing domains from database
                existing_domains = OKDomains.objects.filter(domain__in=domains)

                # Update the existing domains
                for existing_domain in existing_domains:
                    # Update fields only if not empty
                    if row.get('registrar'):
                        existing_domain.registrar = row.get('registrar')
                    if row.get('server'):
                        existing_domain.server = row.get('server')
                    if row.get('system'):
                        existing_domain.system = row.get('system')
                    if row.get('system_owner'):
                        existing_domain.system_owner = row.get('system_owner')
                    if row.get('comments'):
                        existing_domain.comments = row.get('comments')
                    existing_domain.changes_since_last = "Updated from upload"
                    existing_domain.save()

                existing_db_domains = []
                for entry in existing_domains.values():
                    existing_db_domains.append(entry["domain"])
                reader = csv.DictReader(decoded_file)
                for row in reader:
                    domain = row.get('domain')
                    if domain not in existing_db_domains:
                        for entry in blacklist:
                            if entry not in str(domain):
                                new_domain = OKDomains(
                                    domain=domain,
                                    registrar=row.get('registrar'),
                                    server=row.get('server'),
                                    system=row.get('system'),
                                    system_owner=row.get('system_owner'),
                                    comments=row.get('comments'),
                                    changes_since_last="Added from upload"
                                )
                                new_domain.save()

                context = {'uploadmessage': 'Upload completed', 'UserData':GetUserData(request)}
                return render(request, 'domains_upload.html', context)

            except Exception as e:
                context = {'uploadmessage': 'Error during file upload: {}'.format(e), 'UserData':GetUserData(request)}
                return render(request, 'domains_upload.html', context)
    else:
        form = OKDomainsForm()
        context = {'form': form, 'UserData':GetUserData(request)}
        return render(request, 'domains_upload.html', context)

@login_required
def ActiveDirectory(request):
    return render(request, 'active_directory.html')

def LDAPInit():
    ldap_server  = 'ldaps://ldaps.oslofelles.oslo.kommune.no:636'
    username  = os.environ["CSIRT_LDAPUSER"]
    password  = os.environ["CSIRT_LDAPPASSWORD"]
    base_dn =  "DC=oslofelles,DC=oslo,DC=kommune,DC=no"
    ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
    ldap.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
    ldap_conn = ldap.initialize(ldap_server)
    ldap_conn.set_option(ldap.OPT_REFERRALS, 0)
    return ldap_conn

@login_required
def ScannersPage(request):
    return render(request, 'scanners.html')


def URLScan(url):
    data = []
    base_query = 'https://urlscan.io/api/v1/search/?q=domain:{}'.format(url)
    header = {"Authorization": os.environ["URLSCAN_API_SECRET"]}
    result = requests.get(base_query, headers=header).json()
    result_total = result["total"]
    result_took = result["took"]
    for entry in result["results"]:
        data.append(entry)
    return data

@login_required
def DomainURLScan(request):
    if request.method == 'POST':
        domains = request.POST.get('domains')
        domains = domains.split(",")
        for entry in domains:
            domain = entry.replace('http://','').replace('https://','').replace('/', '').replace('www.','')
            results = URLScan(domain)
            print(results)

    return render(request, "attack_surface_domains.html")
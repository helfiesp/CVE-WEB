from django.db import models

class CVE(models.Model):
	cve_id = models.CharField(max_length=100)
	cve_url = models.CharField(max_length=300)
	date = models.CharField(max_length=100)
	source = models.CharField(max_length=100)
	cvss_score = models.CharField(max_length=100)
	potentially_impacted = models.TextField()
	description = models.TextField()
	recent_tweets = models.IntegerField()
	cve_length = models.CharField(max_length=100)

class CVEScans(models.Model):
	scan_type = models.CharField(max_length=100)
	scan_start = models.CharField(max_length=100)
	scan_end = models.CharField(max_length=100)

class PageDescriptions(models.Model):
	page_name = models.CharField(max_length=100)
	page_description = models.TextField()

class NewsArticles(models.Model):
	article_title = models.TextField()
	article_date = models.CharField(max_length=100)
	article_description = models.TextField()
	article_source = models.CharField(max_length=100)
	date_added = models.CharField(max_length=100) 

class UnlistedCVEs(models.Model):
	cve_id = models.CharField(max_length=100)
	article_time_since = models.CharField(max_length=100)
	article_url = models.CharField(max_length=100)
	article_website = models.TextField()
	article_header = models.TextField()
	article_description = models.TextField()

class ShodanResults(models.Model):
	scan_data = models.TextField(default=None)
	entry_ip = models.TextField(default=None)
	entry_port = models.IntegerField(null=True)
	dns_matches = models.TextField(null=True)
	vip_matches = models.TextField(null=True)
	vip_pool_members = models.TextField(null=True)
	matching_vlans = models.TextField(null=True)
	scan_time = models.TextField(default=None)
	last_updated = models.TextField (null=True)
	changes_since_update = models.TextField(null=True)
	entry_comments = models.TextField(null=True)
	internal_hosts = models.TextField(null=True)
	qualys_data = models.TextField(null=True)
	vulnerabilities = models.TextField(null=True)

class ShodanScans(models.Model):
	scan_time = models.TextField(default=None)
	changes_since_last = models.TextField(default=None)

class QualysResults(models.Model):
	severity = models.IntegerField()
	status = hostname = models.TextField()
	hostname = models.TextField()
	ip = models.TextField()
	title = models.TextField()
	first_detected = models.TextField()
	last_detected = models.TextField()
	last_fixed = models.TextField()
	internet_exposed = models.TextField()
	filepath = models.TextField(null=True)
	cve = models.TextField()
	os = models.TextField()
	scan_time = models.TextField()
	known_exploited = models.IntegerField()
	external_vip = models.TextField(null=True)
	server_vlan = models.TextField(null=True)
	bss = models.TextField(null=True)
	known_exploited_cves = models.TextField(null=True)
	bs = models.TextField(default=None, null=True)
	system = models.TextField(default=None, null=True)
	systemcompany = models.TextField(default=None, null=True)
	systemmanager = models.TextField(default=None, null=True)
	systemowner = models.TextField(default=None, null=True)


class PasswordSpray(models.Model):
	user = models.TextField(default=None)
	password = models.TextField(default=None)
	userinfo = models.TextField(default=None)
	scan_time = models.TextField(default=None)

class OKDomains(models.Model):
	domain = models.TextField(default=None)
	registrar = models.TextField(default=None, null=True)
	server = models.TextField(default=None, null=True)
	urlscan = models.TextField(default=None, null=True)
	system = models.TextField(default=None, null=True)
	system_owner = models.TextField(default=None, null=True)
	comments = models.TextField(default=None, null=True)
	vulnerabilities = models.TextField(default=None, null=True)
	changes_since_last = models.TextField(default=None, null=True)

class ADUsers(models.Model):
    account_creation = models.TextField(default=None)
    account_type = models.TextField(default=None)
    description = models.TextField(default=None)
    display_name = models.TextField(default=None)
    email = models.TextField(default=None)
    firstname = models.TextField(default=None)
    groups = models.TextField(default=None)
    lastname = models.TextField(default=None)
    password_expiration = models.TextField(default=None)
    password_last_changed = models.TextField(default=None)
    phone = models.TextField(default=None)
    title = models.TextField(default=None)
    user = models.TextField(default=None)
    is_active = models.BooleanField(default=True) # New field for user's active status

    def __str__(self):
        return self.user
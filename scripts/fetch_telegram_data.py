import sqlite3
import os
import json
import time
import requests
from datetime import datetime
from misc_scripts import secrets

api_key = os.environ["SCANNER_OKCSIRT_NESSUS_KEY"]
api_endpoint = "https://scanner.okcsirt.no/api/telegram/all"
headers = {
    "key": api_key,
    "Content-Type": "application/json"
}

db_path = "/var/csirt/source/CVE-WEB/db.sqlite3"
filepath_template = "/var/csirt/source/CVE-WEB/data/telegram/telegram_data_{}_{}_{}.json"

# Words to search for, all in lowercase
SEARCH_WORDS = ["осло", "норвегия", "норге", "норск", "норвежский", "коммуне", "https://oslo.kommune.no", "oslo kommune", "oslo", "norge", "norway", "oslo.kommune.no", "kommune"]

def GetCurrentTime():
    return datetime.now().strftime("%H:%M:%S")

def get_today_filepath():
    today = datetime.today()
    return filepath_template.format(today.year, today.month, today.day)

def download_telegram_data(filepath):
    print("[{}] Downloading telegram data...".format(GetCurrentTime()))
    response = requests.get(api_endpoint, headers=headers)
    if response.status_code == 200:
        with open(filepath, 'w') as file:
            json.dump(response.json(), file)
        print("[{}] Telegram data saved to: {}...".format(GetCurrentTime(), filepath))
    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")
        exit()

def load_data_from_file(filepath):
    with open(filepath, 'r') as file:
        return json.load(file)

def find_highlighted_word(message):
    """Check if any of the search words appear in the message and return it if found, otherwise return None."""
    if message:
        for word in SEARCH_WORDS:
            if word in message.lower():  # case-insensitive search
                return word
    return None

def save_to_database(telegram_data_list):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    count = 0
    total_count = len(telegram_data_list)
    for telegram_data in telegram_data_list:
        count += 1
        telegram_data_json = json.dumps(telegram_data)
        highlighted_word = find_highlighted_word(telegram_data["message"])

        select_query = "SELECT message_data FROM alerts_telegramdata WHERE message_data = ?"
        cursor.execute(select_query, (telegram_data_json,))
        existing_data = cursor.fetchone()

        if existing_data is None:
            insert_query = """
                INSERT INTO alerts_telegramdata (channel, message, message_data, date_added, highlighted_word) 
                VALUES (?, ?, ?, ?, ?)
            """
            cursor.execute(insert_query, (
                telegram_data["channel"], 
                telegram_data["message"], 
                telegram_data_json, 
                telegram_data["date_added"],
                highlighted_word
            ))
            conn.commit()
            if highlighted_word:
                print("-"*100)
                print("[{}] Data with highlighted word '{}' saved to database. {} out of {}".format(GetCurrentTime(), highlighted_word, count, total_count))
                print(telegram_data["message"])
                print("-"*100)
                time.sleep(5)
        else:
            print("[{}] Data already exists in the database. Not saving.".format(GetCurrentTime()))
    conn.close()

def main():
    filepath = get_today_filepath()
    if not os.path.exists(filepath):
        download_telegram_data(filepath)
    telegram_data_list = load_data_from_file(filepath)
    save_to_database(telegram_data_list)

if __name__ == "__main__":
    main()

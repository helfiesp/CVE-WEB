import sqlite3
import os
import json
import time
import requests
import re  # <-- New Import
from datetime import datetime
from misc_scripts import secrets

api_key = os.environ["SCANNER_OKCSIRT_NESSUS_KEY"]
api_endpoint = "https://scanner.okcsirt.no/api/telegram/all"
headers = {
    "key": api_key,
    "Content-Type": "application/json"
}

db_path = "/var/csirt/source/CVE-WEB/db.sqlite3"
filepath_template = "/var/csirt/source/CVE-WEB/data/telegram/telegram_data_{}_{}_{}.json"

SEARCH_WORDS = ["осло", "норвегия", "норге", "норск", "норвежский", "норвежским", "норвегии", "норвежского","коммуне", "https://oslo.kommune.no", "oslo kommune", "oslo", "norge", "norway", "oslo.kommune.no", "kommune", "norway"]


def LoadProxy():
    os.environ["http_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])
    os.environ["https_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])

def DisableProxy():
    os.environ.pop("http_proxy", None)
    os.environ.pop("https_proxy", None)

def GetCurrentTime():
    return datetime.now().strftime("%H:%M:%S")

def get_today_filepath():
    today = datetime.today()
    return filepath_template.format(today.year, today.month, today.day)


def download_telegram_data(filepath):
    print("[{}] Downloading telegram data...".format(GetCurrentTime()))
    response = requests.get(api_endpoint, headers=headers)
    if response.status_code == 200:
        with open(filepath, 'w') as file:
            json.dump(response.json(), file)
        print("[{}] Telegram data saved to: {}...".format(GetCurrentTime(), filepath))
    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")
        exit()

def load_data_from_file(filepath):
    print("[{}] Loading telegram data from file...".format(GetCurrentTime()))
    with open(filepath, 'r') as file:
        return json.load(file)

def find_highlighted_words(message):  # Renamed the function for clarity
    """Check if any of the search words appear in the message as whole words and return them if found, otherwise return an empty list."""
    found_words = []
    if message:
        for word in SEARCH_WORDS:
            if re.search(r'\b' + re.escape(word) + r'\b', message.lower()):
                found_words.append(word)
    return found_words

def save_to_database(telegram_data_list):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    total_count = len(telegram_data_list)

    # Fetch all existing message_ids to avoid inserting duplicates
    cursor.execute("SELECT message_id FROM alerts_telegramdata")
    existing_message_ids = {row[0] for row in cursor.fetchall()}

    # Prepare data for bulk insert
    to_insert = []
    for telegram_data in telegram_data_list:
        highlighted_words = find_highlighted_words(telegram_data["message"])
        if telegram_data["message_id"] not in existing_message_ids:
            # Clean up the dates by removing the timezone "+00:00"
            clean_message_date = telegram_data["message_date"].split('+')[0]
            clean_date_added = telegram_data["date_added"].split('+')[0]

            to_insert.append((
                telegram_data["channel"],
                telegram_data["message"],
                telegram_data["message_data"],
                telegram_data["message_id"],
                clean_message_date,
                clean_date_added,
                json.dumps(highlighted_words)  # Convert list of highlighted words to string
            ))

    # Use executemany to insert in bulk
    insert_query = """
        INSERT INTO alerts_telegramdata (channel, message, message_data, message_id, message_date, date_added, highlighted_words) 
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """
    cursor.executemany(insert_query, to_insert)
    conn.commit()

    # Printing summary
    print("[{}] Total data processed: {}. New records added: {}.".format(GetCurrentTime(), total_count, len(to_insert)))

    conn.close()


def main():
    LoadProxy()
    filepath = get_today_filepath()
    
    if not os.path.exists(filepath):
        download_telegram_data(filepath)
    
    telegram_data_list = load_data_from_file(filepath)
    
    # Optionally, you can filter the telegram_data_list based on last_message_id
    # Example: telegram_data_list = [data for data in telegram_data_list if data["Message ID"] > last_message_id]

    save_to_database(telegram_data_list)
    DisableProxy()

if __name__ == "__main__":
    main()

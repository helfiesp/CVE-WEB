import nltk
import string
from nltk.corpus import stopwords, words


def is_abnormal_word(word):
    """
    Returns True if a word is an abnormal word (e.g. application name)
    """
    english_vocab = set(words.words())
    return not word.isupper() and not word.lower() in english_vocab
def filter_words(sentence):
    # Tokenize the sentence into words
    words = nltk.word_tokenize(sentence)

    # Filter out non-abnormal words
    filtered_words = [word for word in words if is_abnormal_word(word)]
    return filter_sentence(filtered_words)

def filter_sentence(sentence):
    blacklist = ['.',',',';',':','[',']','{','}','$','&',' ','','%','(',')']
    filtered_sentence = []
    for word in sentence:
        if word not in blacklist and word not in filtered_sentence:
            filtered_sentence.append(word)
    return filtered_sentence

# Example usage
sentence = "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."
filtered_words = filter_words(sentence)
print(filtered_words)
import sqlite3
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
import subprocess
import json
import requests
import time
from datetime import datetime

def GetCurrentTime():
    return datetime.now().strftime("%H:%M:%S")

def KartoteketCheck(conn, entry_id, ip, port):
	# Fetches network information from Kartoteket based upon an IP address and a port.
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	url = "https://kartoteket.oslo.kommune.no/ukecsirt/ipsok/api/?ip={}&port={}".format(ip, port)
	result = requests.get(url, headers=key).json()
	if "error" not in result:
		# Updates the shodan dataset with local network information based upon the external IP found in shodan.
		sql = "UPDATE alerts_shodanresults SET dns_matches=?,vip_matches=?,vip_pool_members=?,matching_vlans=? WHERE id=?"
		values = (str(result["dns_matches"]), str(result["vip_matches"]), str(result["vip_pool_members"]), str(result["matching_vlans"]),entry_id)
		cur = conn.cursor()
		cur.execute(sql,values)
		conn.commit()
		conn.close()

def KartoteketSystemCheck():
	# Fetches information about a system based upon a server name
	# Retrieves information on which system the server is connected to.
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	hostnames = []
	for entry in GetQualysHosts(SQLC.SQLiteConnect()):
		if entry[0] not in hostnames:
			hostnames.append(entry[0])
	for hostname in hostnames:
		url = "https://kartoteket.oslo.kommune.no/ukecsirt/maskinsok/api/?server={}".format(hostname)
		result = requests.get(url, headers=key).json()
		if "error" not in result:
			forvaltere = []
			for forvalter in result["system"]["systemforvaltere"]:
				if len(forvalter) > 5:
					forvaltere.append(forvalter)
			sql = "UPDATE alerts_qualysresults SET bs=?,bss=?,system=?,systemowner=?,systemcompany=?,systemmanager=? WHERE hostname=?"
			values = (
				result["business_service"], 
				result["business_sub_service"], 
				result["system"]["systemnavn"], 
				result["system"]["systemeier"], 
				result["system"]["systemforvalter"], 
				str(forvaltere),
				hostname)
			conn = SQLC.SQLiteConnect()
			cur = conn.cursor()
			cur.execute(sql,values)
			conn.commit()
			conn.close()

def GetQualysHosts(conn):
	# Fetches all hosts found in the Qualys dataset
	cur = conn.cursor()
	cur.execute("SELECT hostname from alerts_qualysresults")
	return cur.fetchall()

def GetShodanData(conn):
	# Fetches id and internet exposed IP/port from the shodan dataset
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, entry_port from alerts_shodanresults")
	return cur.fetchall()

def GetShodanHosts(conn):
	# Fetches the external IP as well as local IP from the shodan dataset.
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, vip_pool_members from alerts_shodanresults")
	return cur.fetchall()


def GetQualysVulns(internal_hosts_list):
	# Fetches the vulnerabilities for the given hostnames.
	vulns = []
	for entry in internal_hosts_list:
		try:
			cur = SQLC.SQLiteConnect().cursor()
			qualys_results = cur.execute("SELECT severity, title, cve from alerts_qualysresults WHERE hostname =?",(entry["server"],)).fetchall()
			for x in qualys_results:
				cves = []
				if "," in x[2]:
					for cve in x[2].split(","):
						if cve != "nan" and cve not in cves:
							if len(str(cve)) > 5:
								cves.append(cve.strip())
				elif x[2] != "nan" and x[2] not in cves:
					if len(str(x[2])) > 5:
						cves.append(x[2].strip())
				vulnerabilities = {"host":entry["server"], "vulnerability":x[1], "severity":x[0], "cve":cves}
				vulns.append(vulnerabilities.copy())
		except IndexError:
			pass
	return vulns


def UpdateKartoteketVulns(entry_id, entry_ip, vip_pool_members):
	# Updates each host in Qualys with an internet exposed tag if it is found in the Shodan dataset
	# Also attaches the vulnerabilities to the shodan table, so the vulnerabilities can be found per external IP.
	internal_hosts_list = []
	conn = SQLC.SQLiteConnect()
	if vip_pool_members and vip_pool_members != "0":
		vip_pool_members = list(eval(vip_pool_members))
		for entry in vip_pool_members:

			# Updates qualys results to tag a server as internet exposed.
			sql = "UPDATE alerts_qualysresults SET internet_exposed=?, external_vip=?, server_vlan=?, bss=? WHERE hostname=?"
			values = (entry_ip, entry["external_vip"], entry["server_vlan"], entry["bss"], entry["server"])
			conn = SQLC.SQLiteConnect()
			cur = conn.cursor()
			cur.execute(sql,values)
			conn.commit()
			conn.close()

			# Generates a list of vulnerabilities and vulnerable assets from an external IP
			internal_hosts_dict = {"server":entry["server"], "ip":entry["host_ip"]}
			internal_hosts_list.append(internal_hosts_dict.copy())

		# updates shodan results to add the vulnerabilities of a server to the exposed IP.
		sql = "UPDATE alerts_shodanresults SET vulnerabilities=?, internal_hosts=? WHERE id=?"
		values = (str(GetQualysVulns(internal_hosts_list)), str(internal_hosts_list), entry_id)
		conn = SQLC.SQLiteConnect()
		cur = conn.cursor()
		cur.execute(sql,values)
		conn.commit()
		conn.close()


def main():
	subprocess.run("unset https_proxy && unset http_proxy", shell=True) # Removes proxy in order to communicate with Kartoteket.
	shodan_entries = GetShodanData(SQLC.SQLiteConnect()) # Fetches all entries from Shodan

	# Iterates through each entry to find local network information from external IPs.
	for entry in shodan_entries:
		KartoteketCheck(SQLC.SQLiteConnect(), entry[0], entry[1], entry[2])

	# Fetches system and business service information from a hostname
	KartoteketSystemCheck()
	
	# Fetches the updated Shodan information and updates the Shodan and Qualys table with the full data and vulnerabilities
	shodan_hosts = GetShodanHosts(SQLC.SQLiteConnect())
	for entry in shodan_hosts:
		UpdateKartoteketVulns(entry[0], entry[1], entry[2])

if __name__ == '__main__':
	try:
		print("[{}] Kartoteket data check & upload started...".format(GetCurrentTime()))
		main()
		print("[{}] Kartoteket data check & upload completed... {}".format(GetCurrentTime()))
	except Exception as e:
		print("[{}] ERROR: Kartoteket data upload failed with error: {}".format(GetCurrentTime(), e))
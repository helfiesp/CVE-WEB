import sqlite3
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
import subprocess
import json
import requests
import time


def KartoteketCheck(conn, entry_id, ip, port):
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	url = "https://kartoteket.oslo.kommune.no/ukecsirt/ipsok/api/?ip={}&port={}".format(ip, port)
	result = requests.get(url, headers=key).json()
	sql = "UPDATE alerts_shodanresults SET dns_matches=?,vip_matches=?,vip_pool_members=?,matching_vlans=? WHERE id=?"
	try:
		values = (str(result["dns_matches"]), str(result["vip_matches"]), str(result["vip_pool_members"]), str(result["matching_vlans"]),entry_id)
		cur = conn.cursor()
		cur.execute(sql,values)
		conn.commit()
		conn.close()
	except KeyError:
		pass


def GetShodanHosts(conn):
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, vip_pool_members from alerts_shodanresults")
	return cur.fetchall()

def GetShodanData(conn):
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, entry_port from alerts_shodanresults")
	return cur.fetchall()

def GetQualysVulns(internal_hosts_list):
	vulns = []
	for entry in internal_hosts_list:
		try:
			cur = SQLC.SQLiteConnect().cursor()
			qualys_results = cur.execute("SELECT severity, title, cve from alerts_qualysresults WHERE hostname =?",(entry["server"],)).fetchall()
			for x in qualys_results:
				cves = []
				if "," in x[2]:
					for cve in x[2].split(","):
						if cve != "nan" and cve not in cves:
							if len(str(cve)) > 5:
								cves.append(cve.strip())
				elif x[2] != "nan" and x[2] not in cves:
					if len(str(x[2])) > 5:
						cves.append(x[2].strip())
				vulnerabilities = {"host":entry["server"], "vulnerability":x[1], "severity":x[0], "cve":cves}
				vulns.append(vulnerabilities.copy())
		except IndexError:
			pass
	return vulns


def UpdateKartoteketVulns(entry_id, entry_ip, vip_pool_members):
	internal_hosts_list = []
	if vip_pool_members:
		vip_pool_members = list(eval(vip_pool_members))
		for entry in vip_pool_members:
			sql = "UPDATE alerts_qualysresults SET internet_exposed=? WHERE hostname=?"
			values = (entry_ip, entry["server"])
			conn = SQLC.SQLiteConnect()
			cur = conn.cursor()
			cur.execute(sql,values)
			conn.commit()
			conn.close()
			internal_hosts_dict = {"server":entry["server"], "ip":entry["host_ip"]}
			internal_hosts_list.append(internal_hosts_dict.copy())
		sql = "UPDATE alerts_shodanresults SET vulnerabilities=? WHERE id=?"
		values = (str(GetQualysVulns(internal_hosts_list)), entry_id)
		conn = SQLC.SQLiteConnect()
		cur = conn.cursor()
		cur.execute(sql,values)
		conn.commit()
		conn.close()


def main():
	subprocess.run("unset https_proxy && unset http_proxy", shell=True)
	shodan_entries = GetShodanData(SQLC.SQLiteConnect())
	for entry in shodan_entries:
		KartoteketCheck(SQLC.SQLiteConnect(), entry[0], entry[1], entry[2])
	shodan_hosts = GetShodanHosts(SQLC.SQLiteConnect())
	for entry in shodan_hosts:
		UpdateKartoteketVulns(entry[0], entry[1], entry[2])

if __name__ == '__main__':
	main()
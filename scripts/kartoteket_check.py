import sqlite3
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
import subprocess
import json
import requests
import time


def KartoteketCheck(conn, entry_id, ip, port):
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	url = "https://kartoteket.oslo.kommune.no/ukecsirt/ipsok/api/?ip={}&port={}".format(ip, port)
	result = requests.get(url, headers=key).json()
	sql = "UPDATE alerts_shodanresults SET dns_matches=?,vip_matches=?,vip_pool_members=?,matching_vlans=? WHERE id=?"
	try:
		values = (str(result["dns_matches"]), str(result["vip_matches"]), str(result["vip_pool_members"]), str(result["matching_vlans"]),entry_id)
		cur = conn.cursor()
		cur.execute(sql,values)
		conn.commit()
		conn.close()
	except KeyError:
		pass


def NVDCheck(cve):
	url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={}".format(cve)
	try:
		result = requests.get(url).json()
	except:
		time.sleep(10)
		result = requests.get(url).json()
	cvss_score = result["vulnerabilities"][0]["cve"]["metrics"]["cvssMetricV31"][0]["cvssData"]["baseScore"]
	time.sleep(6)
	return cvss_score
	

def GetShodanHosts(conn):
	cur = conn.cursor()
	cur.execute("SELECT id, vip_pool_members from alerts_shodanresults")
	return cur.fetchall()

def GetShodanData(conn):
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, entry_port from alerts_shodanresults")
	return cur.fetchall()

def GetQualysVulns(internal_hosts_list):
	vulns = []
	for entry in internal_hosts_list:
		cves = []
		cur = SQLC.SQLiteConnect().cursor()
		qualys_results = cur.execute("SELECT cve from alerts_qualysresults WHERE hostname =?",(entry["server"],)).fetchall()
		for item in qualys_results:
			for x in item:
				try:
					x = x.split(",")
					for i in x:
						if i not in cves and i != "nan":
							cve_dict = {"cve":i, "cvss_score":NVDCheck(i.strip())}
							cves.append(cve_dict.copy())
				except:
					if x not in cves and x != "nan":
						cve_dict = {"cve":x, "cvss_score":NVDCheck(x.strip())}
						cves.append(cve_dict.copy())
				print(cves)
		vulnerabilities = {"host": entry["server"], "cves":cves}

def UpdateKartoteketVulns(id, vip_pool_members):
	internal_hosts_list = []
	if vip_pool_members:
		vip_pool_members = list(eval(vip_pool_members))
		for entry in vip_pool_members:
			internal_hosts_dict = {"server":entry["server"], "ip":entry["host_ip"]}
			internal_hosts_list.append(internal_hosts_dict.copy())
		GetQualysVulns(internal_hosts_list)

def main():
	subprocess.run("unset https_proxy && unset http_proxy", shell=True)
	#shodan_entries = GetShodanData(SQLC.SQLiteConnect())
	#for entry in shodan_entries:
		#KartoteketCheck(SQLC.SQLiteConnect(), entry[0], entry[1], entry[2])
	subprocess.run('export https_proxy="http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128"'.format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"]), shell=True)
	shodan_hosts = GetShodanHosts(SQLC.SQLiteConnect())
	for entry in shodan_hosts:
		UpdateKartoteketVulns(entry[0], entry[1])

if __name__ == '__main__':
	main()
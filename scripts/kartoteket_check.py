import sqlite3
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
import json
import requests


def KartoteketCheck(conn, entry_id, ip, port):
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	url = "http://kartoteket.oslo.kommune.no/ukecsirt/ipsok/api/?ip={}&port={}".format(ip, port)
	result = requests.get(url, headers=key).json()
	sql = "UPDATE alerts_shodanresults SET dns_matches=?,vip_matches=?,vip_pool_members=?,matching_vlans=? WHERE id=?"
	values = (str(result["dns_matches"]), str(result["vip_matches"]), str(result["vip_pool_members"]), str(result["matching_vlans"]),entry_id)
	print(result["dns_matches"], result["vip_matches"], result["vip_pool_members"], result["matching_vlans"],entry_id)
	cur = conn.cursor()
	cur.execute(sql,values)
	conn.commit()
	conn.close()


def NVDCheck(cve):
	url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={}".format(cve)
	result = requests.get(url).json()
	print(result)

def GetServerInfo():
	all_results = ShodanResults.objects.values()
	for entry in all_results:
		print(entry[""])

def GetQualysVulns(server):
	vulnerabilities	= []
	for entry in server:
		vulns = QualysResults.objects.filter(hostname=entry).values("cve")
		for x in vulns:
			x = x["cve"]
			try:
				x = x.split(",")
				for cve in x:
					if cve not in vulnerabilities:
						vulnerabilities.append(cve)
			except:
				if x not in vulnerabilities:
					vulnerabilities.append(x)
	return vulnerabilities


def GetShodanData(conn):
	cur = conn.cursor()
	cur.execute("SELECT id, entry_ip, entry_port from alerts_shodanresults")
	return cur.fetchall()

def main():
	os.system("unset https_proxy && unset http_proxy")
	shodan_entries = GetShodanData(SQLC.SQLiteConnect())
	print("Round 1")
	for entry in shodan_entries:
		KartoteketCheck(SQLC.SQLiteConnect(), entry[0], entry[1], entry[2])

if __name__ == '__main__':
	main()
from shodan import Shodan
import sqlite3
import datetime
from datetime import datetime
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
from deepdiff import DeepDiff
import json
import requests
import time

def GetCurrentTime():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def SQLiteShodanCheckIPChanges(conn):
	try:
		cur = conn.cursor()
		cur.execute("SELECT scan_data from alerts_shodanresults")
		result = cur.fetchall()
		conn.close()
		existing_entry_ips = []
		count = 0
		for entry in result:
			existing_entry_ips.append(eval(entry[0])["ip_str"])
		return existing_entry_ips
	except:
		pass

def SQLiteShodanDataInsert(conn, data):
	sql = "INSERT INTO alerts_shodanresults(scan_data,entry_ip,entry_port,scan_time)VALUES(?,?,?,?)"
	values = (str(data),data["ip_str"], data["port"], datetime.date.today())
	cur = conn.cursor()
	cur.execute(sql,values)
	conn.commit()
	conn.close()
	print("[{}] Data added: {}".format(GetCurrentTime(), data["ip_str"]))

def SQLiteShodanStatsInsert(conn, changes):
	if len(changes) == 0:
		changes = None
	sql = "INSERT INTO alerts_shodanscans(scan_time,changes_since_last)VALUES(?,?)"
	values = (datetime.date.today(),str(changes))
	cur = conn.cursor()
	cur.execute(sql,values)
	conn.commit()
	conn.close()
	

def SQLiteShodanCheckEntry(conn, data):
	cur = conn.cursor()
	cur.execute("SELECT scan_data,id from alerts_shodanresults where entry_ip=? and entry_port=?",(data["ip_str"], data["port"]))
	result = cur.fetchall()
	conn.close()
	if result:
		return result[0]
	else:
		return False

def SQLiteShodanUpdateEntry(conn, data, existing_entry):
	existing_entry_id = existing_entry[1]
	existing_entry_data = eval(existing_entry[0])
	differences = DeepDiff(existing_entry_data, data)
	sql = "UPDATE alerts_shodanresults SET scan_data=?,last_updated=?,changes_since_update=? WHERE id=?"
	values = (str(data),datetime.date.today(),str(differences),existing_entry_id)
	cur = conn.cursor()
	cur.execute(sql,values)
	conn.commit()
	conn.close()

def SQLiteGetNewestScanTime(conn):
    cur = conn.cursor()
    try:
        cur.execute("SELECT scan_time FROM alerts_shodanscans ORDER BY scan_time DESC LIMIT 1")
        newest_scan_time = cur.fetchone()
        
        if newest_scan_time:
            return newest_scan_time[0]
        else:
            return None  # Handle the case when there are no entries in the table
    finally:
        conn.close()


def main():

    # Check the newest entry's scan time
    newest_scan_time = SQLiteGetNewestScanTime(SQLC.SQLiteConnect())  # Replace with the actual function to retrieve the latest scan time
    
    if newest_scan_time == datetime.today().strftime("%Y-%m-%d"):
        print("[{}] Shodan data is already updated with the newest data...".format(GetCurrentTime()))
    else:
	    api = Shodan(os.environ["SHODAN_API_SECRET"])
	    search = 'net:171.23.0.0/16'
	    
	    try:
	        results = api.search(search)
	    except Exception as Error:
	        print("[{}] Shodan API error: {}".format(GetCurrentTime(), Error))
	    
	    try:
	        results2 = api.search(search, page=2)
	    except Exception as Error:
	        print("[{}] Shodan API error search 2: {}".format(GetCurrentTime(), Error))
	    
	    try:
	        results3 = api.search(search, page=3)
	    except Exception as Error:
	        print("[{}] Shodan API error search 3: {}".format(GetCurrentTime(), Error))
	    
	    result_amount = results["total"]
	    values = [results, results2, results3]
	    existing_entry_ips = SQLiteShodanCheckIPChanges(SQLC.SQLiteConnect())
	    new_ips = []
	    
	    for index in range(len(values)):
	        entries = values[index]["matches"]
	        for entry in entries:
	            existing_entry = SQLiteShodanCheckEntry(SQLC.SQLiteConnect(), entry)
	            if existing_entry:
	                SQLiteShodanUpdateEntry(SQLC.SQLiteConnect(), entry, existing_entry)
	            else:
	                SQLiteShodanDataInsert(SQLC.SQLiteConnect(), entry)
	                new_entry_data = {'ip': entry["ip_str"], 'port': entry["port"]}
	                new_ips.append(new_entry_data.copy())
	    
	    SQLiteShodanStatsInsert(SQLC.SQLiteConnect(), new_ips)


if __name__ == '__main__':
	try:
		print("[{}] Shodan search starting...".format(GetCurrentTime()))
		main()
		print("[{}] Shodan search finished...".format(GetCurrentTime()))
	except Exception as e:
		print("[{}] ERROR: Error with Shodan search: {}".format(GetCurrentTime(), e))
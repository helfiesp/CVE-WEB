from shodan import Shodan
import sqlite3
import datetime
import sqliteconnect as SQLC
from misc_scripts import secrets
import os
from deepdiff import DeepDiff
import json

api = Shodan(os.environ["SHODAN_API_SECRET"])


def SQLiteShodanCheckIPChanges(conn):
    cur = conn.cursor()
    cur.execute("SELECT scan_data from alerts_shodanresults")
    result = cur.fetchall()
    conn.close()
    existing_entry_ips = []
    count = 0
    for entry in result:
        ip = eval(entry[0])["ip_str"]
        print(ip)
    return existing_entry_ips



def SQLiteShodanDataInsert(conn, data):
    sql = "INSERT INTO alerts_shodanresults(scan_data,entry_ip,entry_port,scan_time)VALUES(?,?,?,?)"
    values = (str(data),data["ip_str"], data["port"], datetime.date.today())
    cur = conn.cursor()
    cur.execute(sql,values)
    conn.commit()
    conn.close()
    print("DATA INSERTED: {}".format(data["ip_str"]))

def SQLiteShodanStatsInsert(conn, changes):
    sql = "INSERT INTO alerts_shodanscans(scan_time,changes_since_last)VALUES(?,?)"
    values = (datetime.date.today(),changes)
    cur = conn.cursor()
    cur.execute(sql,values)
    conn.commit()
    conn.close()
    

def SQLiteShodanCheckEntry(conn, data):
    cur = conn.cursor()
    cur.execute("SELECT scan_data,id from alerts_shodanresults where entry_ip=? and entry_port=?",(data["ip_str"], data["port"]))
    result = cur.fetchall()
    conn.close()
    if result:
        return result[0]
    else:
        return False

def SQLiteShodanUpdateEntry(conn, data, existing_entry):
    existing_entry_id = existing_entry[1]
    existing_entry_data = eval(existing_entry[0])
    differences = DeepDiff(existing_entry_data, data)
    sql = "UPDATE alerts_shodanresults SET scan_data=?,last_updated=?,changes_since_update=? WHERE id=?"
    values = (str(data),datetime.date.today(),str(differences),existing_entry_id)
    cur = conn.cursor()
    cur.execute(sql,values)
    conn.commit()
    conn.close()


def main():
    count = 0
    search = 'net:171.23.0.0/16'
    results = api.search(search)
    #results2 = api.search(search, page=2)
    #results3 = api.search(search, page=3)
    result_amount = results["total"]
    values = [results]
    existing_entry_ips = SQLiteShodanCheckIPChanges(SQLC.SQLiteConnect())
    new_scan_ips = []
    new_ips = []
    for index in range(len(values)):
        entries = values[index]["matches"]
        for entry in entries:
            count +=1
            existing_entry = SQLiteShodanCheckEntry(SQLC.SQLiteConnect(), entry)
            if entry["ip_str"] not in existing_entry_ips:
                new_ips.append(entry["ip_str"])
            if existing_entry:
                SQLiteShodanUpdateEntry(SQLC.SQLiteConnect(),entry,existing_entry)
            else:
                SQLiteShodanDataInsert(SQLC.SQLiteConnect(), entry)
    for ip in new_scan_ips:
        if ip not in existing_entry_ips:
            new_ips.append(new_ips)
    print(existing_entry_ips)


if __name__ == '__main__':
    main()
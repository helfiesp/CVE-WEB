import sqlite3
from datetime import datetime
import os
import json
import requests
import csv
from misc_scripts import secrets

def LoadProxy():
    os.environ["http_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])
    os.environ["https_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])

def DisableProxy():
    os.environ.pop("http_proxy", None)
    os.environ.pop("https_proxy", None)

def convert_csv_to_json(csv_data):
    json_data = []
    csv_reader = csv.DictReader(csv_data.splitlines())
    for row in csv_reader:
        json_data.append(row)
    return json_data

api_key = os.environ["SCANNER_OKCSIRT_NESSUS_KEY"]
api_endpoints = [
                    {"url":"https://scanner.okcsirt.no/api/nessus/data/all", "scan_id":20},
                    {"url":"https://scanner.okcsirt.no/api/nessus/data/all_ips", "scan_id":111}
                ]

headers = {
    "key": api_key,
    "Content-Type": "application/json"
}

db_path = "/var/csirt/source/CVE-WEB/db.sqlite3"

def DeleteExistingVulnerabilities(dataset):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    for vulnerability in dataset:
        domain = vulnerability["Host"]
        update_query = "UPDATE alerts_okdomains SET vulnerabilities = ? WHERE domain = ?"
        cursor.execute(update_query, ('[]', domain))
        
    conn.commit()
    conn.close()

def filter_nessus_data():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    select_query = "SELECT data FROM alerts_nessusdata ORDER BY date DESC LIMIT 1"
    cursor.execute(select_query,)
    dataset = list(eval(cursor.fetchone()[0]))
    if dataset:
        DeleteExistingVulnerabilities(dataset)

        for vulnerability in dataset:
            if "Host" in vulnerability:
                domain = vulnerability["Host"]
                vulnerabilities_json = json.dumps(vulnerability)
                
                select_domain_query = "SELECT vulnerabilities FROM alerts_okdomains WHERE domain = ?"
                cursor.execute(select_domain_query, (domain,))
                existing_vulnerabilities_json = cursor.fetchone()
                
                if existing_vulnerabilities_json:
                    existing_vulnerabilities_list = json.loads(existing_vulnerabilities_json[0])
                    existing_vulnerabilities_list.append(vulnerability)
                    updated_vulnerabilities_json = json.dumps(existing_vulnerabilities_list)
                    
                    update_query = "UPDATE alerts_okdomains SET vulnerabilities = ? WHERE domain = ?"
                    cursor.execute(update_query, (updated_vulnerabilities_json, domain))
                else:
                    insert_query = "INSERT INTO alerts_okdomains (domain, vulnerabilities) VALUES (?, ?)"
                    cursor.execute(insert_query, (domain, json.dumps([vulnerability])))

                
                conn.commit()

        print("Data updated in alerts_okdomains table.")
    else:
        print("No data found in the database.")


    conn.close()

def main():
    LoadProxy()

    combined_data = []
    for api_endpoint_info in api_endpoints:
        api_endpoint = api_endpoint_info["url"]
        
        response = requests.get(api_endpoint, headers=headers)
        if response.status_code == 200:
            nessus_data = response.json()
            nessus_data = list(eval(nessus_data["data"]))[0]
            print(nessus_data)
            combined_data.append(list(eval(nessus_data["data"]))[0])
   
            print("Fetched data from: {}".format(api_endpoint_info["url"]))
            print("Amount of entries: {}".format(len(combined_data)))
        else:
            print(f"Failed to fetch data from {api_endpoint}. Status code: {response.status_code}")

    exit()
    # Convert back to str to be able to put it in the database.
    combined_data = str(list(eval(combined_data[0])))

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()


    insert_query = "INSERT INTO alerts_nessusdata (data, date) VALUES (?, ?)"
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute(insert_query, (combined_data, current_date))
    conn.commit()
    conn.close()

    print("Combined data saved to database.")
    
    #filter_nessus_data()

 

    DisableProxy()

if __name__ == '__main__':
    main()
    #filter_nessus_data()
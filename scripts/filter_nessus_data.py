import sqlite3
import json

# Connect to the SQLite database
db_path = "/var/csirt/source/CVE-WEB/db.sqlite3"

def DeleteExistingVulnerabilities(dataset):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    for vulnerability in dataset:
        domain = vulnerability["Host"]
        
        # Update existing entry with empty vulnerabilities data
        update_query = "UPDATE alerts_okdomains SET vulnerabilities = ? WHERE domain = ?"
        cursor.execute(update_query, ('[]', domain))
        
    conn.commit()  # Commit changes
    conn.close()

def main():
    # Connect to the sqlite3 database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # Select the latest data from the alerts_nessusdata table
    select_query = "SELECT data FROM alerts_nessusdata ORDER BY date DESC LIMIT 1"
    cursor.execute(select_query)
    latest_data_json = cursor.fetchone()

    if latest_data_json is not None:
        latest_data = json.loads(latest_data_json[0])
        dataset = latest_data.get("data")
        
        if dataset:
            DeleteExistingVulnerabilities(dataset)
            for vulnerability in dataset:
                if "Host" in vulnerability.keys():
                    if vulnerability["Name"] == "Nessus SYN scanner":
                        continue
                    domain = vulnerability["Host"]
                    vulnerabilities_json = json.dumps(vulnerability)
                    
                    # Retrieve existing data for the domain from the OKDomains table
                    select_domain_query = "SELECT vulnerabilities FROM alerts_okdomains WHERE domain = ?"
                    cursor.execute(select_domain_query, (domain,))
                    existing_vulnerabilities_json = cursor.fetchone()
                    
                    if existing_vulnerabilities_json:
                        # Update existing entry with appended data
                        existing_vulnerabilities_list = json.loads(existing_vulnerabilities_json[0])
                        existing_vulnerabilities_list.append(vulnerability)
                        updated_vulnerabilities_json = json.dumps(existing_vulnerabilities_list)
                        
                        update_query = "UPDATE alerts_okdomains SET vulnerabilities = ? WHERE domain = ?"
                        cursor.execute(update_query, (updated_vulnerabilities_json, domain))
                    else:
                        # Create new entry
                        insert_query = "INSERT INTO alerts_okdomains (domain, vulnerabilities) VALUES (?, ?)"
                        cursor.execute(insert_query, (domain, [vulnerability]))
                    
                    conn.commit()  # Commit changes

            print("Data updated in alerts_okdomains table.")
        else:
            print("No data found in the database.")
    else:
        print("No data found in the database.")

    # Close the connection
    conn.close()


if __name__ == '__main__':
    main()
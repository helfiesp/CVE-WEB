import asyncio
import sqlite3
import json
from datetime import datetime
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError
from googletrans import Translator


# Your Telegram API credentials
API_ID = os.environ["TELEGRAM_API_ID"]
API_HASH = os.environ["TELEGRAM_API_HASH"]
PHONE_NUMBER = os.environ["TELEGRAM_PHONE_NUMBER"]
DB_PATH = "/var/csirt/source/CVE-WEB/db.sqlite3"
CHANNEL_LINKS = ['https://t.me/noname05716', 'https://t.me/anotherChannel', 'https://t.me/yetAnotherChannel']  

async def fetch_messages_from_channels():
    async with TelegramClient('anon', API_ID, API_HASH) as client:
        for channel_link in CHANNEL_LINKS:
            channel = await client.get_entity(channel_link)
            messages = await client.get_messages(channel, limit=None)
            insert_messages_into_db(messages, channel.title)

def insert_messages_into_db(messages, channel_name):
    translator = Translator()
    
    # Connect to SQLite database
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    for message in messages:
        # Translate the message to English
        translated_text = translator.translate(message.text, dest='en').text

        # Prepare the data
        data = {
            "Sender ID": message.sender_id,
            "Username": getattr(message.sender, 'username', 'N/A'),
            "Date": str(message.date),
            "Message ID": message.id,
            "Views": getattr(message, 'views', 'N/A'),
            "Replying to Message ID": getattr(message, 'reply_to_msg_id', 'N/A'),
            "Forwarded from ID": getattr(message.forward, 'sender_id', 'N/A') if message.forward else 'N/A',
            "Forwarded Date": str(getattr(message.forward, 'date', 'N/A')) if message.forward else 'N/A',
        }

        # Insert into the database
        cursor.execute("""
            INSERT INTO alerts_telegramdata (channel, message, message_translated, message_data, date_added)
            VALUES (?, ?, ?, ?, ?)
        """, (channel_name, message.text, translated_text, json.dumps(data), datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

    # Commit and close connection
    conn.commit()
    conn.close()

# Run the asynchronous function
asyncio.run(fetch_messages_from_channels())
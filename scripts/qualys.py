import sqliteconnect as SQLC
from misc_scripts import secrets
import datetime
import pandas as pd
import json
import sqlite3
import requests

def main():
	cisa_vulns = GetCisaVulns()
	filename = "/var/csirt/source/CVE-WEB/uploads/qualys_vulns/QualysVulnerabilities.xlsx"
	data = pd.read_excel(filename).to_dict('records')
	if data:
		for entry in data:
			try:
				InsertQualysData(SQLC.SQLiteConnect(), entry, cisa_vulns)
			except Exception as e:
				print("Error: {} | {}".format(e, entry))
	else:
		print("No Qualys data available...")

def DeleteCurrentData(conn):
	cur = conn.cursor()
	cur.execute("DELETE FROM alerts_qualysresults")
	conn.commit()
	conn.close()

def GetCisaVulns():
    cve_list = []
    cisa_url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    cisa_data = requests.get(cisa_url).json()
    for entry in cisa_data["vulnerabilities"]:
        if entry["cveID"] not in cve_list:
            cve_list.append(entry["cveID"])
    return cve_list

def CheckKnownExploited(cisa_vulns, cves):
	# Checks if a vulnerability is known exploited
	known_exploited = []
	try:
		for cve in cves.split(","):
			if cve in cisa_vulns:
				known_exploited.append(cve)
	except:
		if cve in cisa_vulns:
			known_exploited.append(cve)
	return known_exploited


def InsertQualysData(conn, data, cisa_vulns):
    try:
        known_exploited = CheckKnownExploited(cisa_vulns, data["CVE ID"])
        if known_exploited:
            known_exploited_check = 1
        else:
            known_exploited_check = 0
    except:
        known_exploited = 0
        known_exploited_check = 0

    cur = conn.cursor()
    cur.execute("SELECT * FROM alerts_qualysresults WHERE title = ? AND hostname = ?", (data["Title"], data["Hostname"]))
    existing_entry = cur.fetchone()

    if existing_entry:
        # Check for changes and update the fields if necessary
        existing_data = {
            "severity": existing_entry[0],
            "status": existing_entry[1],
            "hostname": existing_entry[2],
            "ip": existing_entry[3],
            "title": existing_entry[4],
            "first_detected": existing_entry[5],
            "last_detected": existing_entry[6],
            "last_fixed": existing_entry[7],
            "internet_exposed": existing_entry[8],
            "filepath": existing_entry[9],
            "cve": existing_entry[10],
            "os": existing_entry[11],
            "scan_time": existing_entry[12],
            "known_exploited": existing_entry[13],
            "known_exploited_cves": existing_entry[14]
        }

        # Compare the existing data with the new data
        changed_fields = []
        for field, value in data.items():
            if existing_data.get(field) != value:
                changed_fields.append(field)
                existing_data[field] = value

        if changed_fields:
            # Update the changed fields
            update_sql = "UPDATE alerts_qualysresults SET {} WHERE title = ? AND hostname = ?".format(
                ", ".join([f"{field} = ?" for field in changed_fields]))
            update_values = [existing_data[field] for field in changed_fields] + [data["Title"], data["Hostname"]]
            cur.execute(update_sql, update_values)
            print("Updated fields: {}".format(changed_fields))
    else:
        # Insert a new entry
        sql = """INSERT INTO alerts_qualysresults(
                 severity,status,hostname,ip,title,first_detected,
                 last_detected,last_fixed,internet_exposed,filepath,cve,os,scan_time,known_exploited, known_exploited_cves)
                 VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""
        values = (data["Severity"], data["Status"], data["Hostname"], data["IP"],
                  data["Title"], str(data["First detected"]), str(data["Last detected"]),
                  str(data["Date Last Fixed"]), str(data["Public Facing"]),data["Results"],
                  str(data["CVE ID"]),data["OS"],datetime.date.today(), known_exploited_check, str(known_exploited))
        try:
            cur.execute(sql, values)
        except sqlite3.IntegrityError:
            if "nan" not in str(values):
                print("Qualys data upload failed with values: {}".format(values))

    conn.commit()
    conn.close()

if __name__ == '__main__':
	print("Qualys data upload")
	try:
		main()
	except Exception as e:
		print("Error with Qualys upload: {}".format(e))
	print("Qualys data upload finished...")
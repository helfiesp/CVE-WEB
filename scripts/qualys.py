import sqliteconnect as SQLC
from misc_scripts import secrets
from datetime import date, timedelta, datetime
import pandas as pd
import json
import sqlite3
import requests
import time
import os


def LoadProxy():
    os.environ["http_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])
    os.environ["https_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])

def DisableProxy():
    os.environ.pop("http_proxy", None)
    os.environ.pop("https_proxy", None)

def GetCurrentTime():
    return datetime.now().strftime("%H:%M:%S")

def main():
    start_time = time.time()

    cisa_vulns = GetCisaVulns()
    filename = "/var/csirt/source/CVE-WEB/uploads/qualys_vulns/QualysVulnerabilities.xlsx"
    new_data = pd.read_excel(filename).to_dict('records')
    current_data_tuples = get_current_data(SQLC.SQLiteConnect())

    print(f"Number of new data entries to compare: {len(new_data)}")

    inserted_entries = 0
    updated_entries = 0

    insert_list = []
    update_list = []

    for entry in new_data:
        if "nan" not in str(entry["Hostname"]):
            current_entry_tuple = (str(entry["ID"]), str(entry["Hostname"]).strip())

            if current_entry_tuple not in current_data_tuples:
                insert_list.append(entry)
                inserted_entries += 1
            else:
                update_list.append(entry)
                updated_entries += 1

    with SQLC.SQLiteConnect() as conn:
        if insert_list:
            transformed_insert_list = transform_insert_data(insert_list, cisa_vulns)
            batch_insert_data(conn, transformed_insert_list)
            print(f"Inserted {len(insert_list)} entries.")

        if update_list:
            transformed_update_list = transform_update_data(update_list, cisa_vulns)
            batch_update_data(conn, transformed_update_list)
            print(f"Updated {len(update_list)} entries.")

    elapsed_time = time.time() - start_time
    print("\nSummary:")
    print(f"Total time taken: {elapsed_time:.2f} seconds")
    print(f"Total entries updated: {updated_entries}")
    print(f"Total entries added: {inserted_entries}")

def get_current_data(conn):
    cur = conn.cursor()
    cur.execute("SELECT qualys_id, hostname FROM alerts_qualysresults")
    results = cur.fetchall()
    data_set = {(str(qualys_id), str(hostname).strip()) for qualys_id, hostname in results}
    conn.close()
    return data_set

def batch_insert_data(conn, insert_list):
    sql = """INSERT INTO alerts_qualysresults(
                 qualys_id, severity, status, hostname, ip, title, first_detected,
                 last_detected, last_fixed, internet_exposed, filepath, cve, os, scan_time,
                 known_exploited, known_exploited_cves)
                 VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

    cur = conn.cursor()
    cur.executemany(sql, insert_list)
    conn.commit()

def batch_update_data(conn, update_list):
    sql = """UPDATE alerts_qualysresults SET
                severity=?, status=?, title=?, first_detected=?, 
                last_detected=?, last_fixed=?, filepath=?, 
                cve=?, scan_time=?, known_exploited=?, known_exploited_cves=? 
             WHERE qualys_id=?"""

    cur = conn.cursor()
    cur.executemany(sql, update_list)
    conn.commit()

def transform_insert_data(insert_list, cisa_vulns):
    transformed_data = []
    for data in insert_list:
        known_exploited = CheckKnownExploited(cisa_vulns, data["CVE ID"])
        known_exploited_check = 1 if known_exploited else 0
        known_exploited_cves = ','.join(known_exploited) if known_exploited else ''

        transformed_entry = (
            data["ID"], data["Severity"], data["Status"], data["Hostname"], data["IP"],
            data["Title"], str(data["First detected"]), str(data["Last detected"]),
            str(data["Date Last Fixed"]), str(data["Public Facing"]), data["Results"],
            str(data["CVE ID"]), data["OS"], date.today() - timedelta(days=1),
            known_exploited_check, known_exploited_cves
        )
        transformed_data.append(transformed_entry)

    return transformed_data

def transform_update_data(update_list, cisa_vulns):
    transformed_data = []
    for entry in update_list:
        known_exploited = CheckKnownExploited(cisa_vulns, entry["CVE ID"])
        known_exploited_check = 1 if known_exploited else 0
        data_tuple = (entry["Severity"], entry["Status"], entry["Title"], 
                      str(entry["First detected"]), str(entry["Last detected"]),
                      str(entry["Date Last Fixed"]), entry["Results"],
                      str(entry["CVE ID"]), date.today() - timedelta(days=1), 
                      known_exploited_check, ','.join(known_exploited), entry["ID"])
        transformed_data.append(data_tuple)
    return transformed_data

def GetCisaVulns():
    cve_list = []
    LoadProxy()
    cisa_url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    cisa_data = requests.get(cisa_url).json()
    for entry in cisa_data["vulnerabilities"]:
        if entry["cveID"] not in cve_list:
            cve_list.append(entry["cveID"])
    DisableProxy()
    return cve_list

def CheckKnownExploited(cisa_vulns, cves):
    known_exploited = []
    if not isinstance(cves, str):
        return known_exploited
    cves_splitted = cves.split(",")
    for cve in cves_splitted:
        if cve in cisa_vulns:
            known_exploited.append(cve)
    return known_exploited

if __name__ == '__main__':
    print("[{}] Qualys data upload started...".format(GetCurrentTime()))
    main()
    print("[{}] Qualys data upload finished...".format(GetCurrentTime()))

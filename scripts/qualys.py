import sqliteconnect as SQLC
from misc_scripts import secrets
import datetime
import pandas as pd
import json
import sqlite3

def main():
	cisa_vulns = GetCisaVulns()
	filename = "/var/csirt/source/CVE-WEB/uploads/qualys_vulns/QualysVulnerabilities.xlsx"
	data = pd.read_excel(filename).to_dict('records')
	if data:
		DeleteCurrentData(SQLC.SQLiteConnect())
		for entry in data:
			InsertQualysData(SQLC.SQLiteConnect(), entry, cisa_vulns)
	else:
		print("No Qualys data available...")

def DeleteCurrentData(conn):
	cur = conn.cursor()
	cur.execute("DELETE FROM alerts_qualysresults")
	conn.commit()
	conn.close()

def GetCisaVulns():
    cve_list = []
    try:
	    cisa_url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
	    cisa_data = requests.get(cisa_url).json()
	    for entry in cisa_data["vulnerabilities"]:
	        if entry["cveID"] not in cve_list:
	            cve_list.append(entry["cveID"])
	except:
		print("Error fetching CISA data...")
    return cve_list

def CheckKnownExploited(cisa_vulns, cves):
	# Checks if a vulnerability is known exploited
	known_exploited = []
	try:
		for cve in cves.split(","):
			if cve in cisa_vulns:
				known_exploited.append(cve)
	except:
		if cve in cisa_vulns:
			known_exploited.append(cve)
	return known_exploited


def InsertQualysData(conn, data, cisa_vulns):
	try:
		known_exploited = CheckKnownExploited(cisa_vulns, data["CVE ID"])
		if known_exploited:
			known_exploited_check = 1
		else:
			known_exploited_check = 0
	except:
		known_exploited = 0
		known_exploited_check = 0

	sql = """INSERT INTO alerts_qualysresults(
			 severity,status,hostname,ip,title,first_detected,
			 last_detected,last_fixed,internet_exposed,filepath,cve,os,scan_time,known_exploited, known_exploited_cves)
			 VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""
	values = (data["Severity"], data["Status"], data["Hostname"], data["IP"],
			  data["Title"], str(data["First detected"]), str(data["Last detected"]),
			  str(data["Date Last Fixed"]), str(data["Public Facing"]),data["Results"],
			  str(data["CVE ID"]),data["OS"],datetime.date.today(), known_exploited_check, str(known_exploited))
	cur = conn.cursor()
	try:
		cur.execute(sql,values)
	except sqlite3.IntegrityError:
		if "nan" not in str(values):
			print("Qualys data upload failed with values: {}".format(values))
	conn.commit()
	conn.close()

if __name__ == '__main__':
	print("Qualys data upload")
	main()
	print("Qualys data upload finished...")
import sqliteconnect as SQLC
from misc_scripts import secrets
from datetime import date, timedelta, datetime
import pandas as pd
import json
import sqlite3
import requests
import os


def LoadProxy():
	os.environ["http_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])
	os.environ["https_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])

def DisableProxy():
	os.environ.pop("http_proxy", None)
	os.environ.pop("https_proxy", None)

def GetCurrentTime():
	return datetime.now().strftime("%H:%M:%S")

def main():
    cisa_vulns = GetCisaVulns()
    filename = "/var/csirt/source/CVE-WEB/uploads/qualys_vulns/QualysVulnerabilities.xlsx"
    new_data = pd.read_excel(filename).to_dict('records')
    current_data_tuples = get_current_data(SQLC.SQLiteConnect())
    test =  (450024, 'c34-p1-cxai197')
    if test in current_data_tuples:
    	print("yes")
    break
    print("current data length: {}".format(len(current_data_tuples)))

    if new_data:
        for entry in new_data:
            current_entry_tuple = (entry["ID"], entry["Hostname"])
            print(current_entry_tuple)
            
            if current_entry_tuple in current_data_tuples:
                update_data(SQLC.SQLiteConnect(), entry, cisa_vulns)
                print("Updating entry: {}".format(entry["ID"]))
            else:
                #InsertQualysData(SQLC.SQLiteConnect(), entry, cisa_vulns)
                print("not inserting: {}".format(entry["ID"]))
    else:
        print("[{}] No new Qualys data available...".format(GetCurrentTime()))



def get_current_data(conn):
    cur = conn.cursor()
    cur.execute("SELECT * FROM alerts_qualysresults")
    results = cur.fetchall()
    
    data_set = set()  # Set to store (qualys_id, hostname) tuples
    
    for result in results:
        qualys_id = result[0]
        hostname = result[2]
        data_set.add((qualys_id, hostname))
        
    conn.close()
    return data_set



def update_data(conn, data, cisa_vulns):
	known_exploited = CheckKnownExploited(cisa_vulns, data["CVE ID"])
	if known_exploited:
		known_exploited_check = 1
	else:
		known_exploited_check = 0

	cur = conn.cursor()
	sql = """UPDATE alerts_qualysresults SET
				severity=?, status=?, hostname=?, ip=?, title=?, first_detected=?, 
				last_detected=?, last_fixed=?, filepath=?, 
				cve=?, os=?, scan_time=?, known_exploited=?, known_exploited_cves=? 
			 WHERE qualys_id=?"""
	values = (data["Severity"], data["Status"], data["Hostname"], data["IP"],
			  data["Title"], str(data["First detected"]), str(data["Last detected"]),
			  str(data["Date Last Fixed"]),data["Results"],
			  str(data["CVE ID"]),data["OS"],date.today() - timedelta(days=1), 
			  known_exploited_check, str(known_exploited), data["ID"])
	try:
		cur.execute(sql, values)
	except sqlite3.IntegrityError as e:
		print("[{}] ERROR: Qualys data update failed with error: {} and values: {}".format(GetCurrentTime(), e, values))
	conn.commit()
	conn.close()

def delete_entry(conn, db_id):
	cur = conn.cursor()
	cur.execute("DELETE FROM alerts_qualysresults WHERE qualys_id=?", (db_id,))
	conn.commit()
	conn.close()


def GetCisaVulns():
	cve_list = []
	LoadProxy()
	cisa_url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
	cisa_data = requests.get(cisa_url).json()
	for entry in cisa_data["vulnerabilities"]:
		if entry["cveID"] not in cve_list:
			cve_list.append(entry["cveID"])
	DisableProxy()
	return cve_list

def CheckKnownExploited(cisa_vulns, cves):
	# Checks if a vulnerability is known exploited
	known_exploited = []
	try:
		cves_splitted =  cves.split(",")
	except:
		pass
	if cves_splitted:
		for cve in cves_splitted:
			if cve in cisa_vulns:
					known_exploited.append(cve)
	else:
		if cve in cisa_vulns:
			known_exploited.append(cve)
	return known_exploited


def InsertQualysData(conn, data, cisa_vulns):

	if data["ID"] != "nan":
		try:
			known_exploited = CheckKnownExploited(cisa_vulns, data["CVE ID"])
			if known_exploited:
				known_exploited_check = 1
			else:
				known_exploited_check = 0
		except:
			known_exploited = 0
			known_exploited_check = 0

		sql = """INSERT INTO alerts_qualysresults(
				 qualys_id,severity,status,hostname,ip,title,first_detected,
				 last_detected,last_fixed,internet_exposed,filepath,cve,os,scan_time,known_exploited, known_exploited_cves)
				 VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""
		values = (data["ID"], data["Severity"], data["Status"], data["Hostname"], data["IP"],
				  data["Title"], str(data["First detected"]), str(data["Last detected"]),
				  str(data["Date Last Fixed"]), str(data["Public Facing"]),data["Results"],
				  str(data["CVE ID"]),data["OS"],date.today() - timedelta(days=1), known_exploited_check, str(known_exploited))
		cur = conn.cursor()
		try:
			cur.execute(sql,values)
		except sqlite3.IntegrityError:
			if "nan" not in str(values):
				print("[{}] ERROR: Qualys data upload failed with values: {}".format(GetCurrentTime(), values))
		conn.commit()
		conn.close()

if __name__ == '__main__':
	print("[{}] Qualys data upload started...".format(GetCurrentTime()))
	main()
	print("[{}] Qualys data upload finished...".format(GetCurrentTime()))
import sqlite3
from datetime import datetime
import time
import scripts.shodan_filter as shodan_filter
import scripts.sqliteconnect as SQLC
from scripts.misc_scripts import secrets
import os
import requests
from alerts.models import QualysResults,ShodanResults


def GetQualysVulns(server):
	vulnerabilities	= []
	for entry in server:
		vulns = QualysResults.objects.filter(hostname=entry).values("cve")
		for x in vulns:
			x = x["cve"]
			try:
				x = x.split(",")
				for cve in x:
					if cve not in vulnerabilities:
						vulnerabilities.append(cve)
			except:
				if x not in vulnerabilities:
					vulnerabilities.append(x)
	return vulnerabilities

def ShodanKartoteketData(ip, port):
	key = {"key": os.environ["KARTOTEKET_NETWORK_API_SECRET"]}
	result = requests.get('http://kartoteket.oslo.kommune.no/ukecsirt/ipsok/api/?ip={}&port={}'.format(ip, port), headers=key).json()
	print(result.keys())
	return result

def SQLiteShodanGetData(conn):
	cur = conn.cursor()
	cur.execute("SELECT * from alerts_shodanresults")
	result = cur.fetchall()
	conn.close()
	if result:
		return result
	else:
		return False


def KartoteketData(entry_data):
	dataset = []
	entry = entry_data["vip_pool_members"]
	if entry:
		entry = list(eval(entry))
		for item in entry:
			active_dataset = {"Server":item["server"], "IP":item["host_ip"]}
			dataset.append(active_dataset.copy())
	return dataset

def SQLiteShodanGetChanges(conn):
	cur = conn.cursor()
	cur.execute("SELECT scan_time, changes_since_last from alerts_shodanscans ORDER BY id DESC LIMIT 1")
	result = list(cur.fetchall()[0])
	results = {'ScanTime': result[0],'IPChanges':result[1]}
	conn.close()
	return results

def StatsBuilder(data):
	TOTAL_ENTRIES = 0
	IP_ADRESSES = []
	CVES = []
	PORTS = []
	TECHNOLOGIES = []
	DOMAINS = []
	for entry in data:
		entry = eval(entry["scan_data"])
		TOTAL_ENTRIES += 1
		IP_ADRESSES.append(entry["ip_str"])
		PORTS.append(entry["port"])
		DOMAINS.append(str(entry["domains"]).replace('[','').replace(']','').replace("'",""))
		try:
			TECHNOLOGIES.append(entry["product"])
		except KeyError:
			pass
	IP_ADRESSES = list(dict.fromkeys(IP_ADRESSES))
	PORTS = str(list(dict.fromkeys(PORTS))).replace('[','').replace(']','')
	TECHNOLOGIES = str(list(dict.fromkeys(TECHNOLOGIES))).replace('[','').replace(']','').replace("'","")
	DOMAINS = str(list(filter(None, list(dict.fromkeys(DOMAINS))))).replace('[','').replace(']','').replace("'","")
	stats = {'Antall treff':TOTAL_ENTRIES, 'Antall IP adresser':len(IP_ADRESSES),'Porter':PORTS,'Teknologier':TECHNOLOGIES,'Domener	':DOMAINS}
	return stats

def FilterCriticality(criticality, vulns_list):
	list_of_vulns = []
	if criticality == 5:
		for vuln in vulns_list:
			if vuln["severity"] == 5:
				list_of_vulns.append(vuln)
	return list_of_vulns

def GetResults(criticality):
	all_entries = ShodanResults.objects.values()
	stats = StatsBuilder(all_entries)
	changes = SQLiteShodanGetChanges(SQLC.SQLiteConnect())
	results_list = []
	for entry in all_entries:
		scan_data = eval(entry["scan_data"])
		scan_data["domains"] = str(scan_data["domains"]).replace("[","").replace("]","").replace("'","")
		scan_data["timestamp"] = scan_data["timestamp"].split("T")[0]
		if "product" not in scan_data:
			scan_data["product"] = "N/A"
		if scan_data not in results_list:
			if not entry["vulnerabilities"]:
				entry["vulnerabilities"] = "[]"
			if not criticality:
				resultset = {"entry_data":scan_data,"date_added":entry["scan_time"], "comments":entry["entry_comments"], "id":entry["id"]}
				results_list.append(resultset.copy())
			else:
				resultset = {"entry_data":scan_data,"date_added":entry["scan_time"], "comments":entry["entry_comments"], "id":entry["id"], "kartoteket_data": KartoteketData(entry), "vulnerabilities":FilterCriticality(criticality, list(eval(entry["vulnerabilities"])))}
				results_list.append(resultset.copy())
	return results_list, stats, changes


import sqlite3
from datetime import datetime
import time
import scripts.shodan_filter as shodan_filter
import scripts.sqliteconnect as SQLC
from scripts.misc_scripts import secrets
import os
import requests
from alerts.models import QualysResults,ShodanResults


def GetQualysVulns(server):
	vulnerabilities	= []
	for entry in server:
		vulns = QualysResults.objects.filter(hostname=entry).values("cve")
		for x in vulns:
			x = x["cve"]
			try:
				x = x.split(",")
				for cve in x:
					if cve not in vulnerabilities:
						vulnerabilities.append(cve)
			except:
				if x not in vulnerabilities:
					vulnerabilities.append(x)
	return vulnerabilities

def SQLiteShodanGetData(conn):
	cur = conn.cursor()
	cur.execute("SELECT * from alerts_shodanresults")
	result = cur.fetchall()
	conn.close()
	if result:
		return result
	else:
		return False


def KartoteketData(entry_data):
    dataset = []
    internal_results = False
    entry = entry_data.get("vip_pool_members", "")

    if entry:
        entry = list(eval(entry))
        for item in entry:
            active_dataset = {"Server": item["server"], "IP": item["host_ip"]}
            dataset.append(active_dataset.copy())

    if any(entry_data.get(key) for key in ["dns_matches", "vip_matches", "vip_pool_members", "matching_vlans"]):
        internal_results = True

    return dataset, internal_results


def SQLiteShodanGetChanges(conn):
	cur = conn.cursor()
	cur.execute("SELECT scan_time, changes_since_last from alerts_shodanscans ORDER BY id DESC LIMIT 1")
	result = list(cur.fetchall()[0])
	results = {'ScanTime': result[0],'IPChanges':result[1]}
	conn.close()
	return results


def StatsBuilder(data):
	TOTAL_ENTRIES = 0
	IP_ADRESSES = set()
	CVES = set()
	PORTS = set()
	TECHNOLOGIES = set()
	DOMAINS = set()

	for entry in data:
		entry_data = eval(entry["scan_data"])
		TOTAL_ENTRIES += 1
		IP_ADRESSES.add(entry_data["ip_str"])
		PORTS.add(entry_data["port"])
		DOMAINS.add(str(entry_data["domains"]).translate(str.maketrans('', '', "[]'")))
		TECHNOLOGIES.add(entry_data.get("product", ""))

	IP_ADRESSES = ','.join(IP_ADRESSES)
	PORTS = ','.join(map(str, PORTS))
	TECHNOLOGIES = ','.join(TECHNOLOGIES)
	DOMAINS = ','.join(DOMAINS)

	stats = {
		'Antall treff': TOTAL_ENTRIES,
		'Antall IP adresser': len(IP_ADRESSES.split(',')),
		'Porter': PORTS,
		'Teknologier': TECHNOLOGIES,
		'Domener': DOMAINS
	}
	
	return stats

def FilterCriticality(criticality, vulns_list):
    if criticality == 45:
        return [vuln for vuln in vulns_list if vuln["severity"] >= 4]
    elif criticality == 1:
        return vulns_list
    else:
        return [vuln for vuln in vulns_list if vuln["severity"] == criticality]

def GetResults(criticality, data=None):
	if not data:
		data = ShodanResults.objects.values()
	stats = StatsBuilder(data)
	try:
		changes = SQLiteShodanGetChanges(SQLC.SQLiteConnect())
	except:
		changes = "N/A"
	results_list = []
	for entry in data:
		if criticality and (not entry["vulnerabilities"] or entry["vulnerabilities"] == "[]"):
			continue
		
		scan_data = eval(entry["scan_data"])
		scan_data["domains"] = str(scan_data["domains"]).replace("[","").replace("]","").replace("'","")
		scan_data["timestamp"] = scan_data["timestamp"].split("T")[0]
		scan_data.setdefault("product", "N/A")
		
		if scan_data not in results_list:
			if not entry["vulnerabilities"]:
				entry["vulnerabilities"] = "[]"
			
			kartoteket_data = KartoteketData(entry)
			resultset = {
				"entry_data": scan_data,
				"date_added": entry["scan_time"],
				"comments": entry["entry_comments"],
				"id": entry["id"],
				"kartoteket_data": kartoteket_data[0],
				"kartoteket_check": kartoteket_data[1]
			}
			
			if criticality:
				resultset["vulnerabilities"] = FilterCriticality(criticality, list(eval(entry["vulnerabilities"])))
			
			results_list.append(resultset.copy())
	
	return results_list, stats, changes, criticality
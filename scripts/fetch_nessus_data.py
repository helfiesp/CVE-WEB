import sqlite3
from datetime import datetime
from misc_scripts import secrets
import requests
import os
import json
import cs


def LoadProxy():
    os.environ["http_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])
    os.environ["https_proxy"] = "http://{}:{}@inetproxy.oslofelles.oslo.kommune.no:3128".format(os.environ["CSIRT_LDAPUSER"], os.environ["CSIRT_LDAPPASSWORD"])

def DisableProxy():
    os.environ.pop("http_proxy", None)
    os.environ.pop("https_proxy", None)


def convert_csv_to_json(csv_data):
    json_data = []
    csv_reader = csv.DictReader(csv_data.splitlines())
    for row in csv_reader:
        json_data.append(row)
    return json_data

api_key = os.environ["SCANNER_OKCSIRT_NESSUS_KEY"]
api_endpoints = [
                    "https://scanner.okcsirt.no/api/nessus/data/all",
                    "https://scanner.okcsirt.no/api/nessus/data/all_ips"
                ]

# Set up headers with the API key
headers = {
    "key": api_key,
    "Content-Type": "application/json"
}

def main()
    # Make the API request
    response = requests.get(api_endpoint, headers=headers, verify=False)

    if response.status_code == 200:
        # Data fetched successfully
        nessus_data = response.json()

        # Convert CSV data to JSON format
        csv_data = nessus_data["data"]
        json_data = convert_csv_to_json(csv_data)

        # Update the JSON with converted CSV data
        nessus_data["data"] = json_data

        # Convert fetched data to a JSON string
        nessus_data_json = json.dumps(nessus_data)

        # Connect to the SQLite database
        db_path = "/var/csirt/source/CVE-WEB/db.sqlite3"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # Check if the fetched data already exists in the database
        select_query = "SELECT data FROM alerts_nessusdata WHERE data = ?"
        cursor.execute(select_query, (nessus_data_json,))
        existing_data = cursor.fetchone()

        if existing_data is None:
            # Insert fetched data into the alerts_nessusdata table
            insert_query = "INSERT INTO alerts_nessusdata (data, date) VALUES (?, ?)"
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(insert_query, (nessus_data_json, current_date))
            
            # Commit changes and close the connection
            conn.commit()
            conn.close()

            print("Data saved to database.")
        else:
            print("Data already exists in the database. Not saving.")
    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")


if __name__ == '__main__':
    LoadProxy()
    main()
    DisableProxy()
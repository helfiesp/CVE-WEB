from alerts.models import CVE,NewsArticles,UnlistedCVEs,QualysResults
from datetime import timedelta
import datetime
from googletrans import Translator


def FilterCVEs(cves, qualyscheck=None):
    if qualyscheck:
        qualys_cves = QualysUniqueCVEs()
    for entry in cves:
        try:
            if entry["cvss_score"] != "N/A" or entry["cvss_score"] != "n/a":
                entry["cvss_score"] = float(entry["cvss_score"])
            else:
                entry["cvss_score"] = 0.0
        except:
            entry["cvss_score"] = 0.0
    sorted_list = sorted(cves, key=lambda d: d['cvss_score'], reverse=True)
    for entry in sorted_list:
        if entry["cvss_score"] == 0.0: 
            entry["cvss_score"] = "N/A"
        if qualyscheck:
            if entry["cve_id"] in qualys_cves:
                entry["qualys_affected"] = 1
    return sorted_list


def daily_cve():
    cves = []
    data = CVE.objects.values()
    for entry in data:
        if entry["date"] == str(datetime.date.today() - datetime.timedelta(days=1)) or entry["date"] == str(datetime.date.today()):
            cves.append(entry)
    return FilterCVEs(cves)

def yesterdays_cve():
    cves = []
    data= CVE.objects.values()
    for entry in data:
        if entry["date"] == str(datetime.date.today() - datetime.timedelta(days=1)):
            cves.append(entry)
    return FilterCVEs(cves)

def weekly_cve():
    days_list = []
    for x in range(7):
        day = datetime.date.today() - timedelta(days=x)
        days_list.append(day.strftime("%Y-%m-%d"))
    cves = []
    data= CVE.objects.values()
    for entry in data:
        if entry["date"] in days_list:
            cves.append(entry)
    return FilterCVEs(cves,1)

def all_cve():
    return FilterCVEs(CVE.objects.values(),1)

def monthly_cve():
    current_month = str(datetime.date.today()).split("-")[1]
    cves = []
    data= CVE.objects.values()
    for entry in data:
        if str(entry["date"]).split("-")[1] == current_month:
            cves.append(entry)
    return FilterCVEs(cves,1)

def single_cve(selected_cves):
    data = CVE.objects.values()
    cves = []
    for entry in data:
        if entry["cve_id"] in selected_cves:
            cves.append(entry)
    return FilterCVEs(cves)

def daily_news():
    data = NewsArticles.objects.values()
    news = []
    today = datetime.date.today()
    yesterday = today - timedelta(days=1)
    for entry in data:
        if entry["date_added"] == today.strftime("%Y-%m-%d") or entry["date_added"] == yesterday.strftime("%Y-%m-%d"):
            if entry not in news:
                news.append(entry)
    return news

def unlisted_cves():
    # Using translator version: 3.1.0a0
    # Other versions encountered a group error.
    translator = Translator()
    data = UnlistedCVEs.objects.values()
    cves = []
    today = datetime.date.today()
    yesterday = today - timedelta(days=1)
    for entry in data:
        if entry["article_time_since"].split()[0] == today.strftime("%m/%d/%Y") or entry["article_time_since"].split()[0] == yesterday.strftime("%m/%d/%Y"):
            if entry not in cves:
                cves.append(entry)
    return cves

def QualysUniqueCVEs():
    data = QualysResults.objects.values('cve')
    unique_cves = []
    for value in data:
        cve = value["cve"]
        try:
            for x in cve.split(","):
                if x not in unique_cves:
                    unique_cves.append(x)
        except:
           if cve not in unique_cves:
                unique_cves.append(cve)
    return unique_cves



